(package examples.test)

(import java.util.*)
(import java.util.stream.*)
(import java.util.function.*)
(import java.nio.file.*)
(import gnu.bytecode.*)
(import java.io.*)

(define-class AlString (ArrayList{String})
	((<init>) void
		(super:<init>)
	)
)

(define-class Ref{E} ()
	(val E)
	;((<init> a int val E c String) void
	;	(super:<init>)
	;	(set this:val val)
	;)
	(ctor! (a int 'val c String)
		(super:<init>)
	)
	;((getVal) E
	;	this:val
	;)
	(get! val)
	;((setVal val E) void
	;	(set this:val val)
	;)
	(set! val)
)

(define-class Main () public
	(l AlString static)
	((main args String[]) void public static
		(set static:l (AlString))
		(static:l:add "ABC")
		(static:l:add "DEF")
		(System:out:println (((static:l:iterator):next):concat "a"))
		(forEach s static:l (System:out:println s))
		(forEach s (static:l:toArray) (System:out:println s))
		(forEach (s i) static:l (println i ":" s))

		(define n (Ref{Integer} 0 4000 ""))
		(define i (Integer 4000))
		(System:out:println (= i (n:getVal)))
		(n:setVal 5)
		(System:out:println (* 3 (n:getVal)))

		(define x 1)
		(inc x 5)
		(inc x)
		(dec x 4)

		(define runnable
			(object (Runnable)
				((run) void public
					(System:out:println (concat x " == " 3))
					(System:out:println "AA")
				)
			)
		)
		(runnable)
		(runnable:run)

		(define add
			(lambda BinOp (c d)
				(+ c d)
			)
		)
		(System:out:println (add 1 2))

		(define mul1
			(lambda Function2{Integer Integer Integer} (c d)
				(* c d)
			)
		)
		(System:out:println (mul1 1 2))

		(define mul2
			(object (Function2{Integer Integer Integer})
				((apply c Integer d Integer) Integer
					(* c d)
				)
			)
		)
		(System:out:println (mul2 1 2))

		(define mul3
			(lambda (c Integer d Integer)
				(* c d)
			)
		)
		(System:out:println (mul3 1 2))

		(define sub
			(object (BinOp)
				((calc c int d int) int public
					(- c d)
				)
			)
		)
		(System:out:println (sub 1 2))

		(define list (Arrays:asList 5 9 3 8 2 9))
		(System:out:println (+ (list:get 0) 1))
		(define stream
			((list:stream):filter
				(lambda Predicate{Integer} (i)
					(> i 5)
				)
			)
		)
		(define collector (Collectors:toList))
		(define filtered (stream:collect collector))
		(println filtered)

		(define a (int[] 1 2 3))
		(println a)

		((lambdaWrap System:out:println Object) 3)

		(println (mapA x (int[] 0 1 2) (static:toggle1 x)))

		(println (mapA x (int[] 0 1 2) (Main:toggle2 x)))

		(let ((x 1) (y 2))
			(println "(" x ", " y ")")
		)

		(println (instance? "a" Object))

		(println
			(synchronized "a"
				3
			)
		)

		(include `(System:out:println "abc"))

		(System:out:format "%d:%s\n" (Object[] 5 "wow"))
		(System:out:format "%d:%s\n" 5 "wow")
		(System:out:format "5:wow\n")

		(println
			(with (ArrayList)
				(add 3)
				(add "k")
				(add 4)
				(add "m")
				(add "n")
				(add 7)
				(set 1 "l")
				(remove 2)
			)
		)

		(println (int[3] 99))

		(define a Object 3)
		(if (&& (instance? a Comparable) (instance? a Object))
			(println (> (a:compareTo 2) 0))
		)
		(if (|| (! (instance? a Integer)) (! (instance? a Object)))
			(println 2)
			(println (* a 2))
		)
		(if (! (instance? a Integer))
			(println 2)
			(println (* a 2))
		)
	)
	((toggle1 x int) int static
		(cond
			((= x 0)
				1
			)
			((= x 1)
				0
			)
			(true
				-1
			)
		)
	)
	((toggle2 x int) int static
		(cond
			((= x 0)
				(set x 1)
			)
			((= x 1)
				(set x 0)
			)
		)
		x
	)
)

(define-class BinOp () public interface abstract
	((calc a int b int) int public abstract)
)
