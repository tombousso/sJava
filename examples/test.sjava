(import java.util.*)
(import java.util.stream.*)
(import java.util.function.*)
(import java.nio.file.*)
(import gnu.bytecode.*)
(import java.io.*)

(define-class AlString (ArrayList{String})
	((<init>) void
		(ArrayList:<init>)
	)
)

(define-class Ref{E} ()
	(val E)
	((<init>) void
		(Object:<init>)
	)
	((get) E
		this:val
	)
	((set val E) void
		(set this:val val)
	)
)

(define-class Main () 'public
	((main args String[]) void 'public 'static
		(define n (Ref{Integer}))
		(n:set 5)
		(System:out:println (* 3 (n:get)))
		(define l (AlString))
		(l:add "ABC")
		(l:add "DEF")
		(System:out:println (((l:iterator):next):concat "a"))
		(forEach s l (System:out:println s))
		(forEach s (l:toArray) (System:out:println s))
		(forEachI s l i (println i ":" s))
		(define x 1)
		(inc x 5)
		(inc x)
		(dec x 4)

		(define runnable (object (Runnable)
			((run) void 'public
				(System:out:println (concat x " == " 3))
				(System:out:println "AA")
			)
		))
		(runnable)
		(runnable:run)

		(define add
			(lambda BinOp (c d)
				(System:out:println this)
				(+ c d)
			)
		)
		(System:out:println (add 1 2))

		(define mul1
			(lambda Function2{Integer Integer Integer} (c d)
				(System:out:println this)
				(* c d)
			)
		)
		(System:out:println (mul1 1 2))

		(define mul2
			(object (Function2{Integer Integer Integer})
				((apply c Integer d Integer) Integer
					(System:out:println this)
					(* c d)
				)
			)
		)
		(System:out:println (mul2 1 2))

		(define mul3
			(lambda (c Integer d Integer) Integer
				(System:out:println this)
				(* c d)
			)
		)
		(System:out:println (mul3 1 2))

		(define sub
			(object (BinOp)
				((calc c int d int) int 'public
					(System:out:println this)
					(- c d)
				)
			)
		)
		(System:out:println (sub 1 2))

		(define list (ArrayList{Integer} (Arrays:asList 5 9 3 8 2 9)))
		(define stream (list:stream))
		(set stream (stream:filter
			(lambda Predicate{Integer} (i)
				(> i 5)
			)
		))
		(define collector (Collectors:toList))
		(System:out:println (stream:collect collector))

		(define a (int[] 1 2 3))
		(println (a:clone))
		(println (Arrays:toString a))

		((lambdaWrap System:out:println Object) 3)
	)
)

(define-class BinOp () 'public 'interface 'abstract
	((calc a int b int) int 'public 'abstract)
)
