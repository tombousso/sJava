(import java.util.*)
(import java.util.stream.*)
(import java.util.function.*)
(import java.nio.file.*)
(import gnu.bytecode.*)
(import java.io.*)

(define-class AlString (ArrayList{String})
	((<init>) void
		(ArrayList:<super>)
	)
)

(define-class Ref{E} ()
	(val E)
	((<init>) void
		(Object:<super>)
	)
)

(define-class Main () 'public
	((main args String[]) void 'public 'static
		(define n (Ref{Integer}))
		(set n:val 5)
		(System:out:println (* 3 n:val))
		(define l (AlString))
		(l:add "ABC")
		(l:add "DEF")
		(System:out:println (((l:iterator):next):concat "a"))
		(forEach s l (System:out:println s))
		(forEach s (l:toArray) (System:out:println s))
		(forEachI s l i (println i ":" s))
		(define x 2)
		(inc x)
		(System:out:println (concat x " == " 3))

		(define runnable (object (Runnable)
			((run) void
				(System:out:println "AA")
			)
		))
		(runnable)
		(runnable:run)

		(define add
			(lambda BinOp (c d)
				(System:out:println this)
				(+ c d)
			)
		)
		(System:out:println (add 1 2))

		(define mul1 Function2{Integer Integer Integer}
			(lambda Function2{Integer Integer Integer} (c d)
				(System:out:println this)
				(* c d)
			)
		)
		(System:out:println (/ (mul1 1 2) 1))

		(define mul2
			(object (Function2{Integer Integer Integer})
				((apply c Integer d Integer) Integer
					(System:out:println this)
					(* c d)
				)
			)
		)
		(System:out:println (mul2 1 2))

		(define mul3
			(lambda (c Integer d Integer)
				(System:out:println this)
				(* c d)
			)
		)
		(System:out:println (mul3 1 2))

		(define sub
			(object (BinOp)
				((calc c int d int) int
					(System:out:println this)
					(- c d)
				)
			)
		)
		(System:out:println (sub 1 2))

		(define al (object (java.util.ArrayList 10)
			((run) void
				(System:out:println "B")
			)
		))
		(al:run)

		(define al (ArrayList{Object}))
		(al:add 5)
		(System:out:println (al:get 0))

		(define list (ArrayList{Integer} (Arrays:asList 5 9 3 8 2 9)))
		(define stream (list:stream))
		(set stream (stream:filter
			(lambda Predicate{Integer} (i)
				(> i 5)
			)
		))
		(define collector (Collectors:toList))
		(System:out:println (stream:collect collector))

		(define a (int[] 1 2 3))
		(println (a:clone))
		(println (Arrays:toString a))
	)
)

(define-class BinOp () 'public 'interface 'abstract
	((calc a int b int) int 'public 'abstract)
)