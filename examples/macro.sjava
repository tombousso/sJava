(define-macro (repeat n @block)
	(macro for `(i 0) `(!= i ,n) `(i (+ i 1)) block)
)
(define-macro (getTimestamp f)
	`,((java.text.SimpleDateFormat (as SToken f):val):format (java.util.Date))
)
(define-macro (for def cond inc @block)
	`(begin
		(define ,def:ops)
		(while ,cond (begin ,block (set ,inc:ops)))
	)
)
(define-macro (timestwo1 expr)
	`(begin
		(define x 0)
		(set x 2)
		(* ,expr x)
	)
)
;mvars are automatically added to timestwo1 at compile time
(define-macro (timestwo2 expr)
	`(begin
		(define (mvar x) 0)
		(set (mvar x) 2)
		(* ,expr (mvar x))
	)
)
(define-macro (rand n)
	`(Integer:toString ((java.util.Random):nextInt ,n))
)
(define-class Main () 'public
	((main args String[]) void 'public 'static
		(define i -1)
		(repeat 5 (System:out:println i))
		(repeat 5 (System:out:println (mvar i)))

		(System:out:println ("Compiled at ":concat (getTimestamp "HH:mm:ss MM/dd/yyyy")))
		(System:out:println ("Compile time dice roll result: ":concat (include
			;inline macro
			(begin
				(System:out:println "Compile time")
				`,(Integer:toString (+ ((java.util.Random):nextInt 6) 1))
			)
		)))
		(System:out:println ("Runtime random number up to 1000: ": concat (rand 1000)))
		(include `(System:out:println "abc"))

		(System:out:format "%d:%s\n" (Object[] 5 "wow"))
		(begin (System:out:format "%d:%s\n" 5 "wow"))
	
		(begin (System:out:println "A") (System:out:println "B") (System:out:println "C"))

		(for (i 0) (!= i 4) (i (+ i 1))
			(for (j 0) (!= j 4) (j (+ j 1))
				(System:out:println ((Integer:toString i):concat (Integer:toString j)))
			)
		)

		(define x 3)
		(inc x)
		(println (timestwo1 x))
		(println (timestwo2 x))
	)
)
