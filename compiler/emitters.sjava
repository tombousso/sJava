(package sjava.compiler.emitters)

(import sjava.compiler.*)
(import sjava.compiler.handlers.*)

(import java.util.*)
(import gnu.bytecode.*)

(define-class Emitter () public
	((<init>) void public
		(super:<init>)
	)
	((emit h GenHandler code CodeAttr needed Type) Type public
		(define types (this:emitAll h code needed))
		(if (= types null)
			Type:voidType
			(begin
				(define l (alen types))
				(if (= l 0)
					Type:voidType
					(aget types (- l 1))
				)
			)
		)
	)
	((emitAll h GenHandler code CodeAttr needed Object) Type[] public
		(Type[] (this:emit h code (as Type needed)))
	)
	((emitAll emitters List{Emitter} h GenHandler code CodeAttr needed Object) Type[] public static
		(define types (Type[] len:(emitters:size)))
		(forEach (emitter i) emitters
			(if (!= emitter null)
				(begin
					(aset types i
						(emitter:emit h code
							(if (instance? needed Type[])
								(aget (as Type[] needed) i)
								(as Type needed)
							)
						)
					)
				)
			)
		)
		types
	)
)

(define-class Goto (Emitter) public
	(label Label public)
	((<init> label Label) void public (super:<init>) (set this:label label))
	((emit h GenHandler code CodeAttr needed Type) Type public
		(define output (!= code null))
		(if (&& output (code:reachableHere)) (code:emitGoto this:label))
		Type:voidType
	)
)

(define-class Null (Emitter)
	((<init>) void (super:<init>))
	((emit h GenHandler code CodeAttr needed Type) Type public
		(if (!= code null) (code:emitPushNull))
		Type:nullType
	)
)

(define-class LoadAVar (Emitter) public
	(avar AVar)
	((<init> avar AVar) void public
		(super:<init>)
		(set this:avar avar)
	)
	((emit h GenHandler code CodeAttr needed Type) Type public
		(this:avar:load code)
	)
)

(define-class Emitters (Emitter) public
	(emitters List{Emitter} public)
	((<init> emitters Emitter[]) void public (super:<init>) (set this:emitters (Arrays:asList emitters)))
	((<init> emitters List) void public (super:<init>) (set this:emitters emitters))
	((emitAll h GenHandler code CodeAttr needed Object) Type[] public
		(Emitter:emitAll this:emitters h code needed)
	)
)

(define-class Add1 (Emitter) public
	(e Emitter)
	((<init> e Emitter) void public
		(super:<init>)
		(set this:e e)
	)
	((emit h GenHandler code CodeAttr needed Type) Type public
		(define output (!= code null))
		(this:e:emit h code Type:intType)
		(if output (code:emitPushInt 1))
		(if output (code:emitAdd Type:intType))
		Type:intType
	)
)

(define-class Nothing (Emitter) public
	(inst Nothing static public)
	((<clinit>) void static
		(set Nothing:inst (Nothing))
	)
	((<init>) void private
		(super:<init>)
	)
	((emit h GenHandler code CodeAttr needed Type) Type public
		Type:voidType
	)
)
