(package sjava.compiler.tokens)

(import sjava.compiler.*)
(import sjava.compiler.emitters.*)
(import sjava.compiler.handlers.*)

(import java.util.*)
(import gnu.bytecode.*)

(define-class ImList{T} (AbstractList{T}) public
	(EMPTY_LIST ImList public static)
	((<clinit>) void public static
		(set ImList:EMPTY_LIST (ImList Collections:EMPTY_LIST))
	)
	(l List{T})
	(i int)
	(sz int)
	((<init> l List{T} i int sz int) void public
		(super:<init>)
		(set this:l (Collections:unmodifiableList l))
		(set this:i i)
		(set this:sz sz)
		(if (|| (< i 0) (< sz 0) (> (+ i sz) (l:size)))
			(throw (RuntimeException))
		)
	)
	((<init> l List{T} i int) void public
		(this:<init> l i (l:size))
	)
	((<init> l List{T}) void public
		(this:<init> l 0)
	)
	((skip k int) ImList{T} public
		(ImList{T} this:l (+ this:i k) (- this:sz k))
	)
	((take k int) ImList{T} public
		(ImList{T} this:l this:i k)
	)
	((skipLast k int) ImList{T} public
		(ImList{T} this:l this:i (- this:sz k))
	)
	((get i int) T public
		(if (|| (< i 0) (>= i this:sz))
			(throw (RuntimeException))
		)
		(this:l:get (+ this:i i))
	)
	((update i int el T) ImList{T} public
		(if (|| (< i 0) (>= i this:sz))
			(throw (RuntimeException))
		)
		(define l (ArrayList this:l))
		(l:set (+ this:i i) el)
		(ImList{T} l this:i this:sz)
	)
	((size) int public
		this:sz
	)
	((iterator) Iterator{T} public
		((this:l:subList this:i (+ this:i this:sz)):iterator)
	)
)

(define-class Token (Emitter) public
	(line int public)
	((<init> line int) void
		(this:<init>)
		(set this:line line)
	)
	((emit h GenHandler code CodeAttr needed Type) Type public
		(h:compile this code needed)
	)
	((toksString l List) String static
		(define s (StringBuffer))
		(forEach (tok i) l
			(s:append tok)
			(if (!= i (- (l:size) 1))
				(s:append " ")
			)
		)
		(s:toString)
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class LexedParsedToken (Token) public
	(endLine int public)
	(transformed Token public transient)
	((<init> line int) void public
		(super:<init> line)
	)
	((firstLine) int public
		this:line
	)
	((lastLine) int public
		this:endLine
	)
	((toStringParsed) String public
		(this:toString)
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class ParsedToken (LexedParsedToken) public
	((<init> line int) void public
		(super:<init> line)
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class LexedToken (LexedParsedToken) public
	(prec int public transient)
	(what String public)
	((<init> line int) void public
		(super:<init> line)
		(set this:what "")
	)
	((<init> line int prec int what String) void public
		(this:<init> line)
		(set this:prec prec)
		(set this:what what)
	)
	((toString) String public
		this:what
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class CommentToken (LexedToken) public
	(val String public)
	((<init> line int val String) void public
		(super:<init> line)
		(set this:val val)
	)
)

(define-class ConstToken (LexedToken) public
	(val String public)
	((<init> line int val String) void public
		(super:<init> line)
		(set this:val val)
	)
	((toString) String public
		this:val
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class SToken (LexedToken) public
	(val String public)
	(tripleQuote bool public)
	((<init> line int val String tripleQuote bool) void public
		(super:<init> line)
		(set this:val val)
		(set this:tripleQuote tripleQuote)
	)
	((toString) String public
		(if this:tripleQuote
			(begin
				(define escaped this:val)
				(if (escaped:endsWith "\"")
					(set escaped (concat (escaped:substring 0 (- (escaped:length) 1)) "\\\""))
					(if (escaped:endsWith "\\")
						(set escaped (concat (escaped:substring 0 (- (escaped:length) 1)) "\\\\"))
					)
				)
				(set escaped (escaped:replace "\"\"\"" "\\\"\"\""))
				(concat "\"\"\"" escaped "\"\"\"")
			)
			(concat "\"" (org.apache.commons.lang3.StringEscapeUtils:escapeJava this:val) "\"")
		)
	)
	((toStringParsed) String public
		this:val
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class NToken (LexedToken) public
	(val Number public)
	(sval String public)
	((<init> line int sval String) void public
		(super:<init> line)
		(set this:sval sval)
		(if (&& (sval:contains ".") (! (Character:isLetter (sval:charAt (- (sval:length) 1)))))
			(set sval (concat sval "d"))
		)
		(set this:val (org.apache.commons.lang3.math.NumberUtils:createNumber sval))
	)
	((toString) String public
		this:sval
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class CToken (LexedToken) public
	(val Character public)
	((<init> line int val Character) void public
		(super:<init> line)
		(set this:val val)
	)
	((toString) String public
		(define c (this:val:toString))
		(forEach entry (Main:specialChars:entrySet)
			(if (this:val:equals (entry:getValue))
				(set c (entry:getKey))
			)
		)
		(concat "#\\" c)
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class VToken (LexedToken) public
	(val String public)
	(macro int public transient)
	((<init> line int val String macro int) void
		(super:<init> line)
		(set this:val val)
		(set this:macro macro)
	)
	((<init> line int val String) void public
		(this:<init> line val 0)
	)
	((toString) String public
		this:val
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class BlockToken (ParsedToken) public
	(toks ImList{LexedParsedToken} public)
	((<init> line int toks ImList{LexedParsedToken}) void public
		(super:<init> line)
		(set this:toks toks)
	)
	((toString) String public
		(concat "(" (Token:toksString this:toks) ")")
	)
	((firstLine) int public
		(if (= (this:toks:size) 0)
			this:line
			((this:toks:get 0):firstLine)
		)
	)
	((lastLine) int public
		(if (= (this:toks:size) 0)
			this:line
			((this:toks:get (- (this:toks:size) 1)):lastLine)
		)
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class BlockToken2 (Token) public
	(toks ImList{Token} public)
	(labels HashMap public)
	(isTransformed bool public)
	((<init> line int toks ImList{Token}) void public
		(super:<init> line)
		(set this:toks toks)
		(set this:labels (HashMap))
	)
)

(define-class GenericToken (ParsedToken) public
	(tok LexedParsedToken public)
	(toks ImList{LexedParsedToken} public)
	((<init> line int tok LexedParsedToken toks ImList{LexedParsedToken}) void public
		(super:<init> line)
		(set this:tok tok)
		(set this:toks toks)
	)
	((toString) String public
		(concat this:tok "{" (Token:toksString this:toks) "}")
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class ArrayToken (ParsedToken) public
	(toks ImList{LexedParsedToken} public)
	((<init> line int toks ImList{LexedParsedToken}) void public
		(super:<init> line)
		(set this:toks toks)
	)
	((toString) String public
		(concat (this:toks:get 0) "[" (Token:toksString (this:toks:skip 1)) "]")
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class ColonToken (ParsedToken) public
	(left LexedParsedToken public)
	(right LexedParsedToken public)
	((<init> line int left LexedParsedToken right LexedParsedToken) void public
		(super:<init> line)
		(set this:left left)
		(set this:right right)
	)
	((toString) String public
		(concat this:left ":" this:right)
	)
	((firstLine) int public
		(this:left:firstLine)
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class FieldToken (Token) public
	(left Token public)
	(right String public)
	((<init> line int left Token right String) void public
		(super:<init> line)
		(set this:left left)
		(set this:right right)
	)
)

(define-class SingleQuoteToken (ParsedToken) public
	(toks ImList{LexedParsedToken} public)
	((<init> line int toks ImList{LexedParsedToken}) void public
		(super:<init> line)
		(set this:toks toks)
	)
	((toString) String public
		(concat "'" (this:toks:get 0))
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class QuoteToken (ParsedToken) public
	(toks ImList{LexedParsedToken} public)
	((<init> line int toks ImList{LexedParsedToken}) void public
		(super:<init> line)
		(set this:toks toks)
	)
	((toString) String public
		(concat "`" (this:toks:get 0))
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class QuoteToken2 (Token) public
	(tok Token public)
	((<init> line int tok Token) void public
		(super:<init> line)
		(set this:tok tok)
	)
)

(define-class UnquoteToken (ParsedToken) public
	(var bool public)
	(toks ImList{LexedParsedToken} public)
	((<init> line int toks ImList{LexedParsedToken} var bool) void public
		(super:<init> line)
		(set this:toks toks)
		(set this:var var)
	)
	((toString) String public
		(concat (if this:var ",$" ",") (this:toks:get 0))
	)
	((<init>) void public
		(super:<init>)
	)
)

(define-class IncludeToken (Token) public
	(mi AMethodInfo public)
	(ret Token public)
	(toks ImList{LexedParsedToken} public)
	((<init> line int toks ImList{LexedParsedToken}) void public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class ObjectToken (Token) public
	(ci ClassInfo public)
	(captured Collection{AVar} public)
	(t Type public)
	(toks ImList{LexedParsedToken} public)
	(superArgs ImList{LexedParsedToken} public)
	((<init> line int t Type superArgs ImList{LexedParsedToken} toks ImList{LexedParsedToken}) void public
		(super:<init> line)
		(set this:t t)
		(set this:superArgs superArgs)
		(set this:toks toks)
	)
)

(define-class LambdaToken (ObjectToken) public
	(sam Method public)
	(scope LinkedHashMap public)
	(params List{Type} public)
	((<init> line int t Type scope LinkedHashMap params List{Type} toks ImList{LexedParsedToken} sam Method) void public
		(super:<init> line t ImList:EMPTY_LIST toks)
		(set this:scope scope)
		(set this:params params)
		(set this:sam sam)
	)
)

(define-class LambdaFnToken (ObjectToken) public
	(ret Type public)
	(scope LinkedHashMap public)
	(params List{Type} public)
	((<init> line int t Type scope LinkedHashMap params List{Type} toks ImList{LexedParsedToken}) void public
		(super:<init> line t ImList:EMPTY_LIST toks)
		(set this:scope scope)
		(set this:params params)
	)
)

(define-class MacroIncludeToken (Token) public
	(ret Token public)
	(name String public)
	(toks ImList{LexedParsedToken} public)
	((<init> line int name String toks ImList{LexedParsedToken}) void public
		(super:<init> line)
		(set this:name name)
		(set this:toks toks)
	)
)

(define-class BeginToken (BlockToken2) public
	((<init> line int toks ImList{Token}) void public
		(super:<init> line toks)
	)
)

(define-class SpecialBeginToken (BlockToken2) public
	((<init> line int toks ImList{Token}) void public
		(super:<init> line toks)
	)
)

(define-class LabelToken (Token) public
	(label String public)
	((<init> line int label String) void public
		(super:<init> line)
		(set this:label label)
	)
)

(define-class GotoToken (Token) public
	(label String public)
	((<init> line int label String) void public
		(super:<init> line)
		(set this:label label)
	)
)

(define-class DefineToken (Token) public
	(name VToken public)
	(type Type public)
	(tok Token public)
	((<init> line int name VToken type Type tok Token) void public
		(super:<init> line)
		(set this:name name)
		(set this:type type)
		(set this:tok tok)
	)
)

(define-class TryToken (Token) public
	(tok Token public)
	(catches ImList{Tuple3{VToken Type ImList{Token}}} public)
	(finallyToks ImList{Token} public)
	((<init> line int tok Token catches ImList finallyToks ImList{Token}) void public
		(super:<init> line)
		(set this:tok tok)
		(set this:catches catches)
		(set this:finallyToks finallyToks)
	)
)

(define-class InstanceToken (Token) public
	(tok Token public)
	(type Type public)
	((<init> line int tok Token type Type) void public
		(super:<init> line)
		(set this:tok tok)
		(set this:type type)
	)
)

(define-class SetToken (Token) public
	(toks ImList{Token} public)
	((<init> line int toks ImList{Token}) void public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class ASetToken (Token) public
	(array Token public)
	(index Token public)
	(el Token public)
	((<init> line int array Token index Token el Token) void public
		(super:<init> line)
		(set this:array array)
		(set this:index index)
		(set this:el el)
	)
)

(define-class AGetToken (Token) public
	(toks ImList{Token} public)
	((<init> line int toks ImList{Token}) void public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class ALenToken (Token) public
	(tok Token public)
	((<init> line int tok Token) void public
		(super:<init> line)
		(set this:tok tok)
	)
)

(define-class AsToken (Token) public
	(type Type public)
	(tok Token public)
	((<init> line int type Type tok Token) void public
		(super:<init> line)
		(set this:type type)
		(set this:tok tok)
	)
)

(define-class NumOpToken (Token) public
	(op String public)
	(toks ImList{Token} public)
	((<init> line int op String toks ImList{Token}) void public
		(super:<init> line)
		(set this:op op)
		(set this:toks toks)
	)
)

(define-class ShiftToken (Token) public
	(right bool public)
	(tok Token public)
	(amt Token public)
	((<init> line int tok Token amt Token right bool) void public
		(super:<init> line)
		(set this:tok tok)
		(set this:amt amt)
		(set this:right right)
	)
)

(define-class IfToken (Token) public
	(toks ImList{Token} public)
	((<init> line int toks ImList{Token}) void public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class CompareToken (Token) public
	(compare String public)
	(toks ImList{Token} public)
	((<init> line int compare String toks ImList{Token}) void public
		(super:<init> line)
		(set this:compare compare)
		(set this:toks toks)
	)
)

(define-class ThrowToken (Token) public
	(tok Token public)
	((<init> line int tok Token) void public
		(super:<init> line)
		(set this:tok tok)
	)
)

(define-class ClassToken (Token) public
	(type Type public)
	((<init> line int type Type) void public
		(super:<init> line)
		(set this:type type)
	)
)

(define-class SynchronizedToken (BlockToken2) public
	((<init> line int toks ImList{Token}) void public
		(super:<init> line toks)
	)
)

(define-class TypeToken (Token) public
	(tok Token public)
	((<init> line int tok Token) void public
		(super:<init> line)
		(set this:tok tok)
	)
)

(define-class ReturnToken (Token) public
	(tok Token public)
	((<init> line int tok Token) void public
		(super:<init> line)
		(set this:tok tok)
	)
)

(define-class CallToken (Token) public
	(target Token public)
	(method String public)
	(toks ImList{Token} public)
	((<init> line int target Token method String toks ImList{Token}) void public
		(super:<init> line)
		(set this:target target)
		(set this:method method)
		(set this:toks toks)
	)
)

(define-class DefaultToken (Token) public
	(toks ImList{Token} public)
	((<init> line int toks ImList{Token}) void public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class ConstructorToken (Token) public
	(type Type public)
	(toks ImList{Token} public)
	((<init> line int type Type toks ImList{Token}) void public
		(super:<init> line)
		(set this:type type)
		(set this:toks toks)
	)
)

(define-class ArrayConstructorToken (Token) public
	(type Type public)
	(lens ImList{Token} public)
	(toks ImList{Token} public)
	((<init> line int type Type lens ImList{Token} toks ImList{Token}) void public
		(super:<init> line)
		(set this:type type)
		(set this:lens lens)
		(set this:toks toks)
	)
)

(define-class EmptyToken (BlockToken2) public
	((<init> line int) void public
		(super:<init> line ImList:EMPTY_LIST)
	)
)
