(import java.util.*)
(import java.nio.file.*)
(import gnu.bytecode.*)
(import java.io.*)
(import net.sourceforge.argparse4j.ArgumentParsers)
(import net.sourceforge.argparse4j.inf.*)

(define-class Compiler () 'public
	(ML int 'static) ;max length of a special token
	(MP int 'static) ;max precedence
	(precs String[][]  'static) ;precedence to special token array
	(s2prec HashMap{String Integer} 'static) ;special token to precedence
	(specialChars HashMap{String Character} 'static)
	(unboxMethods HashMap{Type Method} 'static)
	(constTypes HashMap{String Type} 'static)
	(accessModifiers HashMap{String Short} 'static)
	(binOps HashMap{String Integer} 'static)
	(compare2Ops HashMap{String Integer} 'static)
	(compare1Ops HashMap{String Integer} 'static)
	(unknownType Type 'static)
	(returnType Type 'static)
	((main args String[]) void 'public 'static
		(set Compiler:unknownType (Type:getType "unknownType"))
		(set Compiler:returnType (Type:getType "returnType"))

		(set Compiler:unboxMethods (HashMap{Type Method}))
		(Compiler:unboxMethods:put (Type:shortType:boxedType) (Type:javalangNumberType:getDeclaredMethod "shortValue" 0))
		(Compiler:unboxMethods:put (Type:intType:boxedType) (Type:javalangNumberType:getDeclaredMethod "intValue" 0))
		(Compiler:unboxMethods:put (Type:longType:boxedType) (Type:javalangNumberType:getDeclaredMethod "longValue" 0))
		(Compiler:unboxMethods:put (Type:doubleType:boxedType) (Type:javalangNumberType:getDeclaredMethod "doubleValue" 0))
		(Compiler:unboxMethods:put (Type:booleanType:boxedType) (Type:javalangBooleanType:getDeclaredMethod "booleanValue" 0))
		(Compiler:unboxMethods:put (Type:charType:boxedType) (Type:javalangCharacterType:getDeclaredMethod "charValue" 0))

		(set Compiler:constTypes (HashMap{String Type}))
		(Compiler:constTypes:put "bool" Type:booleanType)
		(Compiler:constTypes:put "byte" Type:byteType)
		(Compiler:constTypes:put "char" Type:charType)
		(Compiler:constTypes:put "double" Type:doubleType)
		(Compiler:constTypes:put "float" Type:floatType)
		(Compiler:constTypes:put "int" Type:intType)
		(Compiler:constTypes:put "long" Type:longType)
		(Compiler:constTypes:put "short" Type:shortType)
		(Compiler:constTypes:put "void" Type:voidType)

		(set Compiler:accessModifiers (HashMap{String Short}))
		(Compiler:accessModifiers:put "static" Access:STATIC)
		(Compiler:accessModifiers:put "public" Access:PUBLIC)
		(Compiler:accessModifiers:put "abstract" Access:ABSTRACT)
		(Compiler:accessModifiers:put "final" Access:FINAL)
		(Compiler:accessModifiers:put "private" Access:PRIVATE)
		(Compiler:accessModifiers:put "protected" Access:PROTECTED)
		(Compiler:accessModifiers:put "synchronized" Access:SYNCHRONIZED)
		(Compiler:accessModifiers:put "transient" Access:TRANSIENT)
		(Compiler:accessModifiers:put "volatile" Access:VOLATILE)
		(Compiler:accessModifiers:put "native" Access:NATIVE)
		(Compiler:accessModifiers:put "interface" Access:INTERFACE)
		(Compiler:accessModifiers:put "super" Access:SUPER)

		(set Compiler:binOps (HashMap{String Integer}))
		(Compiler:binOps:put "+" 96)
		(Compiler:binOps:put "-" 100)
		(Compiler:binOps:put "*" 104)
		(Compiler:binOps:put "/" 108)
		(Compiler:binOps:put "%" 112)
		(Compiler:binOps:put "&" 126)
		(Compiler:binOps:put "|" 128)
		(Compiler:binOps:put "^" 130)

		(set Compiler:compare2Ops (HashMap{String Integer}))
		;opposites
		(Compiler:compare2Ops:put "!=" 153)
		(Compiler:compare2Ops:put "=" 154)
		(Compiler:compare2Ops:put ">=" 155)
		(Compiler:compare2Ops:put "<" 156)
		(Compiler:compare2Ops:put "<=" 157)
		(Compiler:compare2Ops:put ">" 158)

		(set Compiler:compare1Ops (HashMap{String Integer}))
		;opposites
		(Compiler:compare1Ops:put "!=0" 153)
		(Compiler:compare1Ops:put "==0" 154)
		(Compiler:compare1Ops:put ">=0" 155)
		(Compiler:compare1Ops:put "<0" 156)
		(Compiler:compare1Ops:put "<=0" 157)
		(Compiler:compare1Ops:put ">0" 158)
		(Compiler:compare1Ops:put "!=null" 198)
		(Compiler:compare1Ops:put "==null" 199)
		
		(set Compiler:precs (String[][]
			(String[] "(" ")" "{" "}" ":" "'" "," ",$" "`")
			(String[] "\n" "\r\n")
			(String[] ";")
		))

		(set Compiler:specialChars (HashMap{String Character}))
		(Compiler:specialChars:put "space" #\space)

		(set Compiler:MP (- (alen Compiler:precs) 1))

		(set Compiler:ML 2)

		(set Compiler:s2prec (HashMap{String Integer}))

		(define i 0)
		(while (!= i (alen Compiler:precs))
			(define a (aget Compiler:precs i))
			(define j 0)
			(while (!= j (alen a))
				(Compiler:s2prec:put (aget a j) i)
				(set j (+ j 1))
			)
			(set i (+ i 1))
		)

		(define parser (ArgumentParsers:newArgumentParser "sJava compiler"))
		((parser:addArgument (String[] "-d")):setDefault "out")
		((parser:addArgument (String[] "file")):nargs "*")

		(define res (parser:parseArgs args))
		(define fileNames List{String} (res:getList "file"))
		(define files (HashMap{String List{Token}}))

		(define it (fileNames:iterator))
		(while (it:hasNext)
			(define name String (it:next))
			(define s (String (Files:readAllBytes (Paths:get name (String[])))))
			(define toks ((Lexer s):lex))
			((Parser toks):parse 0 (toks:size) Compiler:MP 0)
			(files:put name toks)
		)
		;((System:console):readLine)
		(Compiler:compile files (res:getString "d"))
		;((System:console):readLine)
	)
	((compile files HashMap{String ArrayList{Token}} dir String) void 'static
		(define locals (HashMap))
		(define fileScopes (HashMap{String FileScope}))
		(define macroNames (HashMap{String ClassInfo}))

		(begin
			(define it ((files:entrySet):iterator))
			(while (it:hasNext)
				(define entry (it:next))
				(define toks (entry:getValue))
				(define fs (FileScope (entry:getKey) toks locals))
				(set fs:macroNames macroNames)
				(fileScopes:put (entry:getKey) fs)
				(fs:compileRoot)
			)
		)

		(begin
			(define it ((fileScopes:entrySet):iterator))
			(while (it:hasNext)
				(define entry (it:next))
				(define fs (entry:getValue))
				(fs:compileDefs)
			)
		)

		(define cl (ArrayClassLoader))
		(begin
			(define it ((fileScopes:entrySet):iterator))
			(while (it:hasNext)
				(define entry (it:next))
				(define fs (entry:getValue))
				(fs:compileMacros cl)
			)
		)

		(begin
			(define it ((fileScopes:entrySet):iterator))
			(while (it:hasNext)
				(define entry (it:next))
				(define fs (entry:getValue))
				(fs:compileIncludes)
			)
		)

		(begin
			(define it ((fileScopes:entrySet):iterator))
			(while (it:hasNext)
				(define entry (it:next))
				(define fs (entry:getValue))
				(fs:compileMethods)
			)
		)

		(begin
			(define it ((fileScopes:entrySet):iterator))
			(while (it:hasNext)
				(define entry (it:next))
				(define fs (entry:getValue))
				(define i 0)
				(while (!= i (fs:newClasses:size))
					((fs:newClasses:get i):writeFile dir)
					(set i (+ i 1))
				)
				(set i 0)
				(while (!= i (fs:anonClasses:size))
					((fs:anonClasses:get i):writeFile dir)
					(set i (+ i 1))
				)
			)
		)
	)
	((resolveType map Map{TypeVariable Type} pt Type t Type) Type 'static
		(if (instance? t TypeVariable)
			(if (instance? pt ParameterizedType)
				(begin
					(define tvs ((as ClassType ((as ParameterizedType pt):getRawType)):getTypeParameters))
					(define s String ((as TypeVariable t):getName))
					(define i 0)
					(while (!= i (alen tvs))
						(if (((aget tvs i):getName):equals s)
							(return ((as ParameterizedType pt):getTypeArgumentType i))
						)
						(set i (+ i 1))
					)
					(t:getRawType)
				)
			(if (&& (!= map null) (map:containsKey (as TypeVariable t)))
				(map:get (as TypeVariable t))
				(t:getRawType)
			)
			)
		(if (instance? t ArrayType)
			(ArrayType (Compiler:resolveType map pt (as ArrayType t):elements))
		(if (instance? t ParameterizedType)
			(begin
				(define types ((as ParameterizedType t):getTypeArgumentTypes))
				(define parameterized (Type[] len:(alen types)))
				(define i 0)
				(while (!= i (alen types))
					(aset parameterized i (Compiler:resolveType map pt (aget types i)))
					(set i (+ i 1))
				)
				(ParameterizedType (as ClassType (t:getRawType)) parameterized)
			)
			t
		)
		)
		)
	)
	((resolveType pt Type t Type) Type 'static
		(Compiler:resolveType null pt t)
	)
	((unresolveTv tv TypeVariable generic Type real Type) Type 'static
		(if (instance? generic TypeVariable)
			(if (tv:equals generic)
				(Compiler:tryBox real)
				null
			)
		(if (&&
				(instance? generic ParameterizedType)
				(instance? real ParameterizedType)
				((generic:getRawType):equals (real:getRawType))
			)
			(begin
				(define gtypes ((as ParameterizedType generic):getTypeArgumentTypes))
				(define rtypes ((as ParameterizedType real):getTypeArgumentTypes))
				(define n (alen gtypes))
				(define i 0)
				(while (!= i n)
					(define ret (Compiler:unresolveTv tv (aget gtypes i) (aget rtypes i)))
					(if (!= ret null)
						(return ret)
					)
					(set i (+ i 1))
				)
				null
			)
		(if (&& (instance? generic ArrayType) (instance? real ArrayType))
			(Compiler:unresolveTv tv (as ArrayType generic):elements (as ArrayType real):elements)
			null
		)
		)
		)
	)
	((unresolveTvs tvs TypeVariable[] generics Type[] reals Type[]) Map{TypeVariable Type} 'static
		(if (|| (= tvs null) (!= (alen generics) (alen reals)))
			null
			(begin
				(define out (HashMap{TypeVariable Type}))
				(define i 0)
				(while (!= i (alen tvs))
					(define tv (aget tvs i))
					(define j 0)
					(while (!= j (alen generics))
						(define t (Compiler:unresolveTv tv (aget generics j) (aget reals j)))
						(if (!= t null)
							(begin
								(out:put tv t)
								(goto break)
							)
						)
						(set j (+ j 1))
					)
					(label break)
					(set i (+ i 1))
				)
				out
			)
		)
	)
	((arrayDim t Type) int 'static
		(define out 0)
		(while (instance? t ArrayType)
			(set t (as ArrayType t):elements)
			(set out (+ out 1))
		)
		out
	)
	((shiftDown toks List i int n int) void 'static
		;shift down n elements at i
		(define l (toks:size))
		(define nl (- l n))
		(while (!= i nl)
			(toks:set i (toks:get (+ i n)))
			(set i (+ i 1))
		)
		((toks:subList (- l n) l):clear)
	)
	((compileClassMod tok Token c ClassType) bool 'static
		(if (instance? tok QuoteToken)
			(begin
				(define nmod int (Compiler:accessModifiers:get (as VToken (tok:toks:get 0)):val))
				(c:addModifiers nmod)
				true
			)
			false
		)
	)
	((getParams ci ClassInfo tok Token scope HashMap i int n int) Type[] 'static
		(define types (Type[] len: (/ (- (tok:toks:size) i) 2)))
		(define j 0)
		(while (!= j (alen types))
			(define type (ci:getType (tok:toks:get (+ (* j 2) i 1))))
			(aset types j type)
			(scope:put (as VToken (tok:toks:get (+ (* j 2) i))):val (Arg (+ n j) type))
			(set j (+ j 1))
		)
		types
	)
	((transformBlock block Token mi AMethodInfo transform bool) Token 'static
		(if (&& (!= block:toks null) (! block:transformed))
			(begin
				(if (&& transform (instance? block BlockToken) (> (block:toks:size) 0) (instance? (block:toks:get 0) VToken))
					(begin
						(define val (as VToken (block:toks:get 0)):val)
						(define ret Token
							(if (val:equals "mvar")
								(begin
									(define v VToken (block:toks:get 1))
									(set v:macro 1)
									v
								)
							(if (val:equals "object")
								(ObjectToken block:line block:toks)
							(if (val:equals "lambda")
								(LambdaToken block:line block:toks)
							(if (mi:ci:fs:macroNames:containsKey val)
								(MacroCallToken block:line block:toks)
								null
							)
							)
							)
							)
						)
						(if (!= ret null)
							(begin
								(set ret:transformed true)
								(return ret)
							)
						)
					)
				)
				(if transform (set block:transformed true))
				(if (&& transform (instance? block BlockToken))
					(set (as BlockToken block):labels (HashMap))
				)
				(define i 0)
				(while (!= i (block:toks:size))
					(define tok (block:toks:get i))
					(block:toks:set i (Compiler:transformBlock tok mi
						(||
							(&&
								transform
								(! block:neverTransform)
							)
							block:alwaysTransform
						)
					))
					(if (&& transform (instance? tok BlockToken) (> (tok:toks:size) 0) (instance? (tok:toks:get 0) VToken))
						(begin
							(define val (as VToken (tok:toks:get 0)):val)
							(if (val:equals "label")
								((as BlockToken block):labels:put (as VToken (tok:toks:get 1)):val (Label))
							)
						)
					)
					(set i (+ i 1))
				)
			)
		)
		block
	)
	((transformBlock block Token mi AMethodInfo) Token 'static 'public
		(Compiler:transformBlock block mi (! block:neverTransform))
	)
	((numericOpType types Type[]) Type 'static
		(define l (Arrays:asList types))
		(define otype Type:intType)
		(if (|| (l:contains Type:doubleType) (l:contains (ClassType:make "java.lang.Double")))
			(set otype Type:doubleType)
		(if (|| (l:contains Type:longType) (l:contains (ClassType:make "java.lang.Long")))
			(set otype Type:longType)
		)
		)
		otype
	)
	((allNumeric types Type[]) bool 'static
		(define i 0)
		(while (!= i (alen types))
			(define t (Compiler:tryUnbox (aget types i)))
			(if (! (instance? t PrimType))
				(return false)
			)
			(set i (+ i 1))
		)
		true
	)
	((tryBox t Type) Type 'static
		(if (instance? t PrimType)
			((as PrimType t):boxedType)
			t
		)
	)
	((tryUnbox t Type) Type 'static
		(define o (PrimType:unboxedType t))
		(if (= o null)
			t
			o
		)
	)
	((isCompare s String) bool 'static
		(|| (s:equals "!") (s:equals "&&") (s:equals "||") (Compiler:compare1Ops:containsKey s) (Compiler:compare2Ops:containsKey s))
	)
	((invertComp inv bool n int) int 'static
		(if inv
			(if (& n 1) (+ n 1) (- n 1))
			n
		)
	)
	((emitInvoke h Handler name String type Type emitter Emitters mi AMethodInfo code CodeAttr needed Type) Type 'static
		(define output (!= code null))
		(define types (emitter:emitAll h mi null Compiler:unknownType))
		;(System:out:println name)
		;(System:out:println type)
		;(System:out:println (Arrays:toString types))
		(define filter (MFilter name types type))
		(filter:searchAll)
		(define mc (filter:getMethodCall))
		(define method mc:m)
		;(System:out:println method)
		(define typeParameters (method:getTypeParameters))
		(define params (method:getGenericParameterTypes))
		(define varargs (!= (& (method:getModifiers) Access:TRANSIENT) 0))
		(begin
			(define j 0)
			(define n
				(if
					(&&
						varargs
						(||
							(< (alen types) (alen params))
							(!= (Compiler:arrayDim (aget params (- (alen params) 1))) (Compiler:arrayDim (aget types (- (alen params) 1))))
						)
					)
					1
					0
				)
			)
			(while (!= j (- (alen params) n))
				((emitter:emitters:get j):emit h mi code (Compiler:resolveType mc:tvs mc:t (aget params j)))
				(set j (+ j 1))
			)
			(if (= n 1)
				(begin
					(define at ArrayType (aget params (- (alen params) 1)))
					(define et (Compiler:resolveType mc:tvs mc:t at:elements))
					(if output (code:emitPushInt (+ 1 (- (alen types) (alen params)))))
					(if output (code:emitNewArray (at:elements:getRawType)))
					(define oj j)
					(while (!= j (alen types))
						(if output (code:emitDup))
						(if output (code:emitPushInt (- j oj)))
						((emitter:emitters:get j):emit h mi code et)
						(if output (code:emitArrayStore))
						(set j (+ j 1))
					)
				)
			)
		)
		(if output (code:emitInvoke method))
		(define out (Compiler:resolveType mc:tvs mc:t (method:getReturnType)))
		(if (!= out Type:voidType)
			(if output (code:emitCheckcast (out:getRawType)))
		)
		out
	)
	((compareType types Type[]) Type 'static
		(if (Compiler:allNumeric types)
			(Compiler:numericOpType types)
			Type:objectType
		)
	)
	;tok = condition
	((emitIf_ h Handler inv bool tok Token i int e int compare String trueE Emitter falseE Emitter mi AMethodInfo code CodeAttr needed Type) Type 'static
		(define output (!= code null))
		(if (compare:equals "!")
			(begin
				(Compiler:emitIf h (! inv) tok i trueE falseE mi code needed)
			)
		(if (|| (&& (! inv) (compare:equals "&&")) (&& inv (compare:equals "||")))
			(begin
				(define skipL (Label))
				(define falseL (Label))
				(define falseG (Goto falseL))
				(define i 1)
				(while (!= i (- e 1))
					(Compiler:emitIf h inv tok i Nothing:inst falseG mi code needed)
					(set i (+ i 1))
				)
				(Compiler:emitIf h inv tok (- e 1) (Emitters (Emitter[] trueE (Goto skipL))) null mi code needed)
				(if output (falseL:define code))
				(if (!= falseE null)
					(begin
						(falseE:emit h mi code needed)
					)
				)
				(if output (skipL:define code))
				(trueE:emit h mi null needed)
			)
		(if (|| (&& (! inv) (compare:equals "||")) (&& inv (compare:equals "&&")))
			(begin
				(define skipL (Label))
				(define trueL (Label))
				(define trueG (Goto trueL))
				(define i 1)
				(while (!= i (- e 1))
					(Compiler:emitIf h (! inv) tok i Nothing:inst trueG mi code needed)
					(set i (+ i 1))
				)
				(Compiler:emitIf h (! inv) tok (- e 1) (Emitters (Emitter[] falseE (Goto skipL))) null mi code needed)
				(if output (trueL:define code))
				(define type (trueE:emit h mi code needed))
				(if output (skipL:define code))
				type
			)
			(begin
				(define falseLabel (instance? falseE Goto))
				(define skip (Label))
				(define label
					(if falseLabel
						(as Goto falseE):label
						skip
					)
				)
				(if (Compiler:compare1Ops:containsKey compare)
					(begin
						(define j i)
						(while (!= j e)
							(define types (h:compileAll tok:toks j (+ j 1) mi null Compiler:unknownType))
							(define otype (Compiler:compareType types))
							(h:compileAll tok:toks j (+ j 1) mi code otype)
							(if output (code:emitGotoIfCompare1 label (Compiler:invertComp inv (Compiler:compare1Ops:get compare))))
							(set j (+ j 1))
						)
					)
					(begin
						(define j i)
						(while (!= (+ j 1) e)
							(define types (h:compileAll tok:toks j (+ j 2) mi null Compiler:unknownType))
							(define otype (Compiler:compareType types))
							(h:compileAll tok:toks j (+ j 2) mi code otype)
							(if output (code:emitGotoIfCompare2 label (Compiler:invertComp inv (Compiler:compare2Ops:get compare))))
							(set j (+ j 1))
						)
					)
				)
				(define type (trueE:emit h mi code needed))
				(if (! falseLabel)
					(begin
						(define end (Label))
						(if (&& (! (instance? trueE Nothing)) (!= falseE null))
							(if (&& output (code:reachableHere)) (code:emitGoto end))
						)
						(if output (skip:define code))
						(if (! (= falseE null))
							(begin
								(falseE:emit h mi code needed)
								(if output (end:define code))
							)
						)
					)
				)
				type
			)
		)
		)
		)
	)
	((emitIf h Handler inv bool tok Token i int trueE Emitter falseE Emitter mi AMethodInfo code CodeAttr needed Type) Type 'static
		(define cond (tok:toks:get i))
		(if (&& (instance? cond BlockToken) (instance? (cond:toks:get 0) VToken) (Compiler:isCompare (as VToken (cond:toks:get 0)):val))
			(Compiler:emitIf_ h inv cond 1 (cond:toks:size) (as VToken (cond:toks:get 0)):val trueE falseE mi code needed)
			(Compiler:emitIf_ h inv tok i (+ i 1) "!=0" trueE falseE mi code needed)
		)
	)
	((generateBridgeMethod target Method params Type[] ret Type) void 'static
		(define c (target:getDeclaringClass))
		(define rparams (Type[] len:(alen params)))
		(define i 0)
		(while (!= i (alen params))
			(aset rparams i ((aget params i):getRawType))
			(set i (+ i 1))
		)
		(define found (c:getDeclaredMethod (target:getName) rparams))
		(if (|| (= found null) (! (Type:isSame (found:getReturnType) ret)))
			(begin
				(define m (c:addMethod (target:getName) rparams (ret:getRawType) (| Access:PUBLIC Access:BRIDGE Access:SYNTHETIC)))
				(define code (m:startCode))
				(define i 0)
				(code:emitPushThis)
				(while (!= i (alen rparams))
					(code:emitLoad (code:getArg (+ i 1)))
					(Compiler:castMaybe code (aget rparams i) (aget (target:getGenericParameterTypes) i))
					(set i (+ i 1))
				)
				(code:emitInvoke target)
				(Compiler:castMaybe code (target:getReturnType) (ret:getRawType))
				(code:emitReturn)
			)
		)
	)
	((castMaybe code CodeAttr result Type needed Type) Type 'static
		(define output (!= code null))
		(if (|| (= needed Compiler:unknownType) (= result Compiler:returnType))
			result
		(if (= needed Type:voidType)
			(begin
				(if (!= result Type:voidType)
					(if output (code:emitPop 1))
				)
				Type:voidType
			)
		(if (! (Type:isSame needed result))
			(begin
				(if (instance? result PrimType)
					(begin
						(if (instance? needed ClassType)
							(if (= result Type:voidType)
								(if output (code:emitPushNull))
								(begin
									(define prim (PrimType:unboxedType needed))
									(define box
										(if (= prim null)
											(begin
												(set prim result)
												((as PrimType result):boxedType)
											)
											(begin
												(if output (code:emitConvert (as PrimType result) prim))
												(as ClassType needed)
											)
										)
									)
									(if output (code:emitInvoke (box:getMethod "valueOf" (Type[] prim))))
								)
							)
							(if output (code:emitConvert (as PrimType result) (as PrimType needed)))
						)
					)
				(if (instance? needed PrimType)
					(begin
						(define unbox (Compiler:unboxMethods:get result))
						(if output (code:emitInvoke unbox))
						(if output (code:emitConvert (as PrimType (unbox:getReturnType)) (as PrimType needed)))
					)
					(if output (code:emitCheckcast (needed:getRawType)))
				)
				)
				needed
			)
			result
		)
		)
		)
	)
)

(define-class Emitter ()
	((<init>) void
		(Object:<init>)
	)
	((emit h Handler mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define types (this:emitAll h mi code needed))
		(if (= types null)
			null
			(begin
				(define l (alen types))
				(if (= l 0)
					null
					(aget types (- l 1))
				)
			)
		)
	)
	((emitAll h Handler mi AMethodInfo code CodeAttr needed Object) Type[] 'public (Type[] (this:emit h mi code (as Type needed))))
)

(define-class Token (Emitter) 'public
	(line int 'public)
	(prec int 'public)
	(what String 'public)
	(toks List{Token} 'public)
	(alwaysTransform bool 'public)
	(neverTransform bool 'public)
	(transformed bool)
	((<init>) void 'public
		(Emitter:<init>)
		(set this:prec -1)
		(set this:what "")
		(set this:alwaysTransform false)
		(set this:neverTransform false)
		(set this:transformed false)
	)
	((<init> line int) void
		(set this:line line)
		(Token:<init>)
	)
	((<init> line int prec int) void
		(Token:<init> line)
		(set this:prec prec)
	)
	((<init> line int prec int what String) void 'public
		(Token:<init> line prec)
		(set this:what what)
	)
	((<init> line int toks List{Token}) void 'public
		(Token:<init> line)
		(set this:toks toks)
	)
	((repr) String 'public
		((this:getClass):getName)
	)
	((toString) String
		(define stoks "")
		(if (!= this:toks null)
			(begin
				(set stoks (stoks:concat " { "))
				(define i 0)
				(while (!= i (this:toks:size))
					(set stoks ((stoks:concat ((this:toks:get i):toString)):concat " "))
					(set i (+ i 1))
				)
				(set stoks (stoks:concat "} "))
			)
		)
		((org.apache.commons.lang3.StringEscapeUtils:escapeJava (this:repr)):concat stoks)
	)
	((emit h Handler mi AMethodInfo code CodeAttr needed Type) Type 'public
		(h:compile this mi code needed)
	)
)

(define-class SToken (Token) 'public
	(val String 'public)
	((<init> line int val String) void
		(Token:<init> line)
		(set this:val val)
	)
	((<init>) void 'public
		(Token:<init>)
	)
)

(define-class NToken (Token) 'public
	(val Number 'public)
	((<init> line int sval String) void
		(Token:<init> line)
		(if (org.apache.commons.lang3.math.NumberUtils:isNumber sval)
			(set this:val (org.apache.commons.lang3.math.NumberUtils:createNumber sval))
		)
	)
	((<init>) void 'public
		(Token:<init>)
	)
)

(define-class CToken (Token) 'public
	(val Character)
	((<init> line int val Character) void
		(Token:<init> line)
		(set this:val val)
	)
	((<init>) void 'public
		(Token:<init>)
	)
)

(define-class VToken (Token) 'public
	(val String 'public)
	(macro int 'public 'transient)
	((<init> line int val String macro int) void
		(Token:<init> line)
		(set this:val val)
		(set this:macro macro)
	)
	((<init> line int val String) void
		(VToken:<init> line val 0)
	)
	((toString) String
		this:val
	)
	((<init>) void 'public
		(Token:<init>)
	)
)

(define-class Lexer ()
	(code String)
	(i int)
	(ml int)
	(s String)
	(line int)
	((<init> code String) void
		(Object:<init>)
		(set this:code code)
		(set this:ml (code:length))
		(set this:line 1)
	)
	((getprec) int
		;check if code at i is a special token
		(define ii this:i)
		(define p -1)
		(define l Compiler:ML)
		(while (! (|| (>= p 0) (= l 0)))
			(if (<= (+ ii l) this:ml)
				(begin
					(set this:s (this:code:substring ii (+ ii l)))
					(if (Compiler:s2prec:containsKey this:s)
						(set p (Compiler:s2prec:get this:s))
					)
				)
			)
			(set l (- l 1))
		)
		p
	)
	((nextTok) void
		(while (! (|| (= this:i this:ml) (= (this:code:charAt this:i) #\space) (>= (this:getprec) 0)))
			(set this:i (+ this:i 1))
		)
	)
	((token) Token
		(while (! (|| (! (Character:isWhitespace (this:code:charAt this:i))) (>= (this:getprec) 0)))
			(set this:i (+ this:i 1))
		)
		(define p (this:getprec))
		(if (< p 0)
			(begin
				(define oi this:i)
				(define c (this:code:charAt this:i))
				(if (= c #\")
					(begin
						(set this:i (+ this:i 1))
						(define esc false)
						(while (! (&& (! esc) (= (this:code:charAt this:i) #\")))
							(set esc (&& (! esc) (= (this:code:charAt this:i) #\\)))
							(set this:i (+ this:i 1))
						)
						(set this:i (+ this:i 1))
						(SToken this:line (org.apache.commons.lang3.StringEscapeUtils:unescapeJava (this:code:substring (+ oi 1) (- this:i 1))))
					)
				(if (= c #\#)
					(begin
						(set this:i (+ this:i 2))
						(this:nextTok)
						(define schar (this:code:substring (+ oi 2) this:i))
						(CToken this:line
							(if (= (schar:length) 1)
								(schar:charAt 0)
								(Compiler:specialChars:get schar)
							)
						)
					)
				(if (|| (Character:isDigit c) (&& (= c #\-) (Character:isDigit (this:code:charAt (+ this:i 1)))))
					(begin
						(this:nextTok)
						(NToken this:line (this:code:substring oi this:i))
					)
					(begin
						(this:nextTok)
						(define s (this:code:substring oi this:i))
						(if (|| (s:equals "null") (s:equals "true") (s:equals "false"))
							(Token this:line -1 s)
							(VToken this:line s)
						)
					)
				)
				)
				)
			)
			(begin
				(set this:i (+ this:i (this:s:length)))
				(if (this:s:contains "\n")
					(set this:line (+ this:line 1))
				)
				(Token this:line p this:s)
			)
		)
	)
	((lex) ArrayList
		(set this:i 0)
		(define out (ArrayList))
		(while
			(!= this:i this:ml)
			(out:add (this:token))
		)
		out
	)
)

(define-class BlockToken (Token) 'public
	(labels HashMap)
	((<init> line int toks List{Token}) void 'public
		(Token:<init> line toks)
	)
	((<init>) void 'public
		(Token:<init>)
	)
)

(define-class GenericToken (Token) 'public
	(tok Token 'public)
	(params List{Token} 'public)
	((<init> line int tok Token params List{Token}) void 'public
		(Token:<init> line)
		(set this:tok tok)
		(set this:params params)
	)
	((<init>) void 'public
		(Token:<init>)
	)
)

(define-class ColonToken (Token) 'public
	((<init> line int toks List{Token}) void 'public
		(Token:<init> line toks)
	)
	((<init>) void 'public
		(Token:<init>)
	)
)

(define-class QuoteToken (Token) 'public
	((<init> line int toks List{Token}) void
		(Token:<init> line toks)
		(set this:neverTransform true)
	)
	((<init>) void 'public
		(Token:<init>)
	)
)

(define-class UnquoteToken (Token) 'public
	(s bool 'public)
	((<init> line int toks List{Token} s bool) void
		(Token:<init> line toks)
		(set this:s s)
		(set this:alwaysTransform true)
	)
	((<init>) void 'public
		(Token:<init>)
	)
)

(define-class Parser ()
	(toks ArrayList{Token})
	((<init> toks ArrayList{Token}) void
		(Object:<init>)
		(set this:toks toks)
	)
	;these methods return the number of tokens which they shifted down
	((block i int e int o String c String) int
		(define oi i)
		(define oe e)
		(define end false)
		(set i (+ i 1))
		(while (! end)
			(define t (this:toks:get i))
			(define w t:what)
			(if (w:equals o)
				(set e (- e (this:block i e o c)))
			)
			(if (w:equals c)
				(begin
					(define d (this:parse (+ oi 1) i 0 0))
					(set i (- i d))
					(set e (- e d))
					(define n (- i oi))
					;(if (> n 2)
						(this:toks:set oi (BlockToken (this:toks:get oi):line (ArrayList (this:toks:subList (+ oi 1) i))))
						;(set! (toks oi) (toks (+ oi 1)))
					;)
					(Compiler:shiftDown this:toks (+ oi 1) n)
					(set e (- e n))
					(set end true)
				)
			)
			(set i (+ i 1))
		)
		(- oe e)
	)
	((generic i int e int o String c String) int
		(define oi i)
		(define oe e)
		(define end false)
		(set i (+ i 1))
		(while (! end)
			(define t Token (this:toks:get i))
			(define w t:what)
			(if (w:equals o)
				(begin
					(set e (- e (this:generic i e o c)))
					(set i (- i 1))
				)
			)
			(if (w:equals c)
				(begin
					(define d (this:parse (+ oi 1) i 0 0))
					(set i (- i d))
					(set e (- e d))
					(define n (+ (- i oi) 1))
					(this:toks:set (- oi 1) (GenericToken t:line (this:toks:get (- oi 1)) (ArrayList (this:toks:subList (+ oi 1) i))))
					(Compiler:shiftDown this:toks oi n)
					(set e (- e n))
					(set end true)
				)
			)
			(set i (+ i 1))
		)
		(- oe e)
	)
	((comment i int e int) int
		(define oi i)
		(define oe e)
		(define end false)
		(set i (+ i 1))
		(while (! end)
			(if (|| (= i (this:toks:size)) ((this:toks:get i):what:contains "\n"))
				(begin
					(define n (- i oi))
					(Compiler:shiftDown this:toks oi n)
					(set e (- e n))
					(set end true)
				)
			)
			(set i (+ i 1))
		)
		(- oe e)
	)
	((parse i int e int p int mp int) int
		;parse from i to e starting at precedence p, until mp (minimum precedence)
		(define oi i)
		(define oe e)
		(while (!= i e)
			(define t (this:toks:get i))
			(define w t:what)
			(if (= t:prec p)
				(begin
					(if (w:equals "(")
						(set e (- e (this:block i e "(" ")")))
					)
					(if (w:equals "{")
						(begin
							(set e (- e (this:generic i e "{" "}")))
							(set i (- i 1))
						)
					)
					(if (w:equals ";")
						(begin
							(set e (- e (this:comment i e)))
							(set i (- i 1))
						)
					)
					(if (w:equals ":")
						(begin
							(this:toks:set (- i 1) (ColonToken t:line (ArrayList (Arrays:asList (Object[] (this:toks:get (- i 1)) (this:toks:get (+ i 1)))))))
							(Compiler:shiftDown this:toks i 2)
							(set e (- e 2))
							(set i (- i 1))
						)
					)
					(if (|| (w:equals "'") (w:equals "`") (w:equals ",$") (w:equals ","))
						(begin
							(set e (- e (this:parse (+ i 1) e 0 0)))
							(define al (ArrayList (Arrays:asList (Object[] (this:toks:get (+ i 1))))))
							(define new
								(if (|| (w:equals ",") (w:equals ",$"))
									(UnquoteToken t:line al (w:equals ",$"))
									(QuoteToken t:line al)
								)
							)
							(this:toks:set i new)
							(Compiler:shiftDown this:toks (+ i 1) 1)
							(set e (- e 1))
							(goto break)
						)
					)
					(if (&& (!= (w:length) 0) (Character:isWhitespace (w:charAt 0)))
						(begin
							(Compiler:shiftDown this:toks i 1)
							(set e (- e 1))
							(set i (- i 1))
						)
					)
				)
			)
			(set i (+ i 1))
		)
		(label break)
		(if (> p mp)
			(set e (- e (this:parse oi e (- p 1) mp)))
		)
		(- oe e)
	)
)

(define-class AVar ()
	(type Type)
	((<init> type Type) void (Object:<init>) (set this:type type))
	((load code CodeAttr) Type this:type)
	((store code CodeAttr) void ())
)

(define-class Var (AVar)
	(var Variable)
	((<init> var Variable type Type) void (AVar:<init> type) (set this:var var))
	((load code CodeAttr) Type
		(define output (!= code null))
		(if output (code:emitLoad this:var))
		this:type
	)
	((store code CodeAttr) void
		(define output (!= code null))
		(if output (code:emitStore this:var))
	)
)

(define-class Arg (AVar)
	(n int)
	((<init> n int type Type) void (AVar:<init> type) (set this:n n))
	((load code CodeAttr) Type
		(define output (!= code null))
		(if output (code:emitLoad (code:getArg this:n)))
		(if output (code:emitCheckcast (this:type:getRawType)))
		this:type
	)
	((store code CodeAttr) void
		(define output (!= code null))
		(if output (code:emitStore (code:getArg this:n)))
	)
)

(define-class FileScope ()
	(name String)
	(toks List{Token})
	(locals HashMap)
	(imports HashMap)
	(starImports ArrayList)
	(found HashMap{String Boolean})
	(includes ClassInfo)
	(newClasses List{ClassInfo})
	(anonClasses List{ClassInfo})
	(package String)
	(macros ArrayList{ClassInfo})
	(macroNames HashMap{String List{ClassInfo}})
	((<init> name String toks List{Token} locals HashMap) void
		(Object:<init>)
		(set this:name (name:substring 0 (name:indexOf ".")))
		(set this:toks toks)
		(set this:locals locals)
		(set this:imports (HashMap))
		(set this:starImports (ArrayList))
		(this:starImports:add "java.lang.")
		(set this:found (HashMap{String Boolean}))
		(set this:newClasses (ArrayList{ClassInfo}))
		(set this:anonClasses (ArrayList{ClassInfo}))
		(set this:macros (ArrayList))
		(set this:package
			(if (&&
					(> (toks:size) 0)
					(instance? (toks:get 0) BlockToken)
					(instance? ((toks:get 0):toks:get 0) VToken)
					((as VToken ((toks:get 0):toks:get 0)):val:equals "package")
				)
				((as VToken ((toks:get 0):toks:get 1)):val:concat ".")
				""
			)
		)
	)
	((classExists name String) bool
		(if (this:found:containsKey name)
			(this:found:get name)
			(begin
				(define b
					(try
						(begin
							(Class:forName name)
							true
						)
						e
						false
					)
				)
				(this:found:put name b)
				b
			)
		)
	)
	((getNewType tok Token) ClassType
		(if (instance? tok GenericToken)
			(begin
				(define tok GenericToken tok)
				(define c (ClassType (this:package:concat (as VToken tok:tok):val)))
				(define params tok:params)
				(define tparams (Type[] len:(params:size)))
				(define i 0)
				(while (!= i (params:size))
					(define name (as VToken (params:get i)):val)
					(define tv (TypeVariable name))
					(aset tparams i tv)
					(set i (+ i 1))
				)
				(c:setTypeParameters tparams)
				c
			)
		(if (instance? tok VToken)
			(ClassType (this:package:concat (as VToken tok):val))
			null
		)
		)
	)
	((compileRoot) void
		(define i 0)
		(while (!= i (this:toks:size))
			(this:compileRoot (this:toks:get i))
			(set i (+ i 1))
		)
	)
	((compileRoot tok Token) void
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(if (first:val:equals "define-class")
					(begin
						(define c (this:getNewType (tok:toks:get 1)))
						(define name (c:getName))
						(define ci (ClassInfo name c this))
						(set ci:toks tok:toks)
						(this:newClasses:add ci)
						(this:locals:put ci:name ci:c)
						(define run true)
						(define i 3)
						(while (&& run (!= i (ci:toks:size)))
							(set run (Compiler:compileClassMod (ci:toks:get i) ci:c))
							(if run (set i (+ i 1)))
						)
					)
				(if (first:val:equals "import")
					(begin
						(define import (as VToken (tok:toks:get 1)):val)
						(if (import:contains "*")
							(this:starImports:add (import:replace "*" ""))
							(this:imports:put (import:substring (+ (import:lastIndexOf ".") 1)) (Type:getType import))
						)
					)
				(if (first:val:equals "define-macro")
					(begin
						(define scope (HashMap))
						(define params (tok:toks:get 1))
						(define name (as VToken (params:toks:get 0)):val)
						(define o 4)
						(define types (Type[] len:(+ o (- (params:toks:size) 1)) (Type:getType "AMethodInfo") (Type:getType "gnu.bytecode.Type") Type:intType (Type:getType "Handler")))
						(define mods (| Access:PUBLIC Access:STATIC))
						(begin
							(define i 0)
							(while (!= (+ o i) (alen types))
								(define t (Type:getType "Token"))
								(define name (as VToken (params:toks:get (+ i 1))):val)
								(if (name:contains "@")
									(begin
										(set name (name:replace "@" ""))
										(set mods (| mods Access:TRANSIENT))
										(set t (ArrayType t))
									)
								)
								(aset types (+ o i) t)
								(scope:put name (Arg (+ o i) t))
								(set i (+ i 1))
							)
						)
						(define cname ((("Macros$":concat (this:name:replace "/" ".")):concat "$"):concat (Integer:toString (this:macros:size))))
						(define macros (ClassInfo cname this))
						(macros:c:setModifiers Access:PUBLIC)
						(set tok:toks (tok:toks:subList 2 (tok:toks:size)))
						(define macro (MacroInfo macros (as BlockToken tok) (macros:c:addMethod name types (Type:getType "Token") mods) scope))
						(if (this:macroNames:containsKey name)
							((this:macroNames:get name):add macros)
							(begin
								(define al (ArrayList{ClassInfo}))
								(al:add macros)
								(this:macroNames:put name al)
							)
						)
						(this:macros:add macros)
						(macros:methods:add macro)
					)
				)
				)
				)
			)
		)
	)
	((compileDefs) void
		(define i 0)
		(while (!= i (this:newClasses:size))
			((this:newClasses:get i):compileDefs)
			(set i (+ i 1))
		)
	)
	((compileMacros cl ArrayClassLoader) void
		(define i 0)
		(while (!= i (this:macros:size))
			(define macros (this:macros:get i))
			((macros:methods:get 0):compileMethodBody)
			(define cname (macros:c:getName))
			(cl:addClass cname (macros:c:writeToArray))
			(set macros:rc (cl:loadClass cname true))
			(set i (+ i 1))
		)
	)
	((compileIncludes) void
		(define includes (ClassInfo "Includes" this))
		(set this:includes includes)
		(includes:c:setModifiers Access:PUBLIC)
		(define n 0)
		(define i 0)
		(while (!= i (this:newClasses:size))
			(define methods (this:newClasses:get i):methods)
			(define j 0)
			(while (!= j (methods:size))
				(define method (methods:get j))
				(set n (this:compileIncludes method:block:toks n))
				(set j (+ j 1))
			)
			(set i (+ i 1))
		)
		(define cl (ArrayClassLoader))
		(cl:addClass "Includes" (includes:c:writeToArray))
		(set this:includes:rc (cl:loadClass "Includes" true))
	)
	((compileIncludes toks List{Token} n int) int
		(define i 0)
		(while (!= i (toks:size))
			(define tok (toks:get i))
			(if (&& (!= tok:toks null) (> (tok:toks:size) 0))
				(if (&& (instance? (tok:toks:get 0) VToken) ((as VToken (tok:toks:get 0)):val:equals "include"))
					(begin
						(define name ("$":concat (Integer:toString n)))
						(set tok:toks (tok:toks:subList 1 (tok:toks:size)))
						(define mi (IncludeInfo this:includes (as BlockToken tok) (this:includes:c:addMethod name (Type[] (Type:getType "AMethodInfo") (Type:getType "gnu.bytecode.Type") Type:intType (Type:getType "Handler")) (Type:getType "Token") (| Access:PUBLIC Access:STATIC)) (HashMap)))
						(toks:set i (IncludeToken tok:line mi))
						(this:includes:methods:add mi)
						(mi:compileMethodBody)
						(set n (+ n 1))
					)
					(set n (this:compileIncludes tok:toks n))
				)
			)
			(set i (+ i 1))
		)
		n
	)
	((compileMethods) void
		(define i 0)
		(while (!= i (this:newClasses:size))
			((this:newClasses:get i):compileMethods)
			(set i (+ i 1))
		)
	)
)

(define-class ClassInfo ()
	(name String)
	(c ClassType)
	(fs FileScope)
	(toks List{Token})
	(methods List{AMethodInfo})
	(anonymous int)
	(rc Class)
	(tvs HashMap{String TypeVariable})
	((<init> name String c ClassType fs FileScope) void
		(Object:<init>)
		(set this:name name)
		(set this:fs fs)
		(set this:c c)
		(set this:toks (ArrayList{Token}))
		(set this:methods (ArrayList{AMethodInfo}))
		(set this:anonymous 1)
		(if (!= c null)
			(begin
				(this:c:setClassfileVersion ClassType:JDK_1_8_VERSION)
				(this:c:setSuper Type:javalangObjectType)
				(define args (c:getTypeParameters))
				(if (!= args null)
					(begin
						(set this:tvs (HashMap{String TypeVariable}))
						(define i 0)
						(while (!= i (alen args))
							(define tv Type (aget args i))
							(if (instance? tv TypeVariable)
								(this:tvs:put (tv:getName) (as TypeVariable tv))
							)
							(set i (+ i 1))
						)
					)
				)
			)
		)
	)
	((<init> name String fs FileScope) void
		(ClassInfo:<init> name (ClassType name) fs)
	)
	((writeFile dir String) void
		(define pre (dir:concat (this:fs:package:replace "." "/")))
		((File pre):mkdirs)
		(this:c:writeToFile ((pre:concat (this:c:getSimpleName)):concat ".class"))
	)
	((getType name String) Type
		(define i 0)
		(define dims -1)
		(while (!= i -1)
			(set i (name:indexOf "[]" (+ i 1)))
			(set dims (+ dims 1))
		)
		(set name (name:replace "[" ""))
		(set name (name:replace "]" ""))
		(define type Type
			(if (&& (!= this:tvs null) (this:tvs:containsKey name))
				(this:tvs:get name)
			(if (&& (! (name:contains ".")) (this:fs:locals:containsKey (this:fs:package:concat name)))
				(this:fs:locals:get (this:fs:package:concat name))
			(if (Compiler:constTypes:containsKey name)
				(Compiler:constTypes:get name)
			(if (this:fs:locals:containsKey name)
				(this:fs:locals:get name)
			(if (this:fs:imports:containsKey name)
				(this:fs:imports:get name)
			(if (this:fs:classExists name)
				(Type:getType name)
			(begin
				(define type Type null)
				(define i 0)
				(while (! (|| (! (= type null)) (= i (this:fs:starImports:size))))
					(if (this:fs:classExists ((as String (this:fs:starImports:get i)):concat name))
						(set type (Type:getType ((as String (this:fs:starImports:get i)):concat name)))
					)
					(set i (+ i 1))
				)
				type
			)
			)
			)
			)
			)
			)
			)
		)
		(set i 0)
		(while (!= i dims)
			(set type (ArrayType type))
			(set i (+ i 1))
		)
		type
	)
	((getType tok Token) Type
		(if (instance? tok GenericToken)
			(begin
				(define tok GenericToken tok)
				(define c ClassType ((this:getType (as VToken tok:tok):val):getRawType))
				(define params tok:params)
				(define tparams (Type[] len:(params:size)))
				(define i 0)
				(while (!= i (params:size))
					(aset tparams i (this:getType (params:get i)))
					(set i (+ i 1))
				)
				(ParameterizedType c tparams)
			)
		(if (instance? tok VToken)
			(this:getType (as VToken tok):val)
			null
		)
		)
	)
	((compileDef tok Token) void
		(if (instance? tok BlockToken)
			(begin
				(define first (tok:toks:get 0))
				(if (instance? first BlockToken) ;method definition
					(begin
						(define scope (HashMap))
						(define mods 0)
						(define end false)
						(define i 2)
						(while (! (|| end (= i (tok:toks:size))))
							(define mod (tok:toks:get i))
							(if (instance? mod QuoteToken)
								(begin
									(set mods (| mods (Compiler:accessModifiers:get (as VToken (mod:toks:get 0)):val)))
									(set i (+ i 1))
								)
								(set end true)
							)
						)
						(define n 0)
						(if (= (& mods Access:STATIC) 0)
							(begin
								(scope:put "this" (Arg 0 this:c))
								(set n 1)
							)
						)
						(define types (Compiler:getParams this first scope 1 n))
						(define m Method (this:c:addMethod (as VToken (first:toks:get 0)):val types (this:getType (tok:toks:get 1)) mods))
						(define block (BlockToken tok:line (ArrayList (tok:toks:subList i (tok:toks:size)))))
						(this:methods:add (MethodInfo this block m scope))
					)
					(begin ;field definition
						(define mods 0)
						(define end false)
						(define i 2)
						(while (! (| (= i (tok:toks:size)) end))
							(define mod (tok:toks:get i))
							(if (instance? mod QuoteToken)
								(begin
									(define nmod (Compiler:accessModifiers:get (as VToken (mod:toks:get 0)):val))
									(set mods (| mods nmod))
								)
								(set end true)
							)
							(set i (+ i 1))
						)
						(define t (this:getType (tok:toks:get 1)))
						(this:c:addField (as VToken first):val t mods)
					)
				)
			)
		)
	)
	((compileDefs) void
		(define c this:c)
		(define supers (this:toks:get 2):toks)
		(define i 0)
		(while (! (= i (supers:size)))
			(define related Type (this:getType (supers:get i)))
			(if (related:isInterface)
				(c:addInterface related)
				(c:setSuper related)
			)
			(set i (+ i 1))
		)
		(set i 3)
		(while (!= i (this:toks:size))
			(this:compileDef (this:toks:get i))
			(set i (+ i 1))
		)
	)
	((compileMethods) void
		(define i 0)
		(while (!= i (this:methods:size))
			(define mi (this:methods:get i))
			(mi:compileMethodBody)
			(set i (+ i 1))
		)
	)
)

(define-class AMethodInfo ()
	(ci ClassInfo)
	(block BlockToken)
	(method Method)
	(scopes ArrayList{ArrayDeque{HashMap}})
	(labels ArrayDeque{HashMap})
	((<init> ci ClassInfo block BlockToken method Method scope HashMap) void
		(Object:<init>)
		(set this:ci ci)
		(set this:block block)
		(set this:method method)
		(set this:scopes (ArrayList))
		(define h (ArrayDeque))
		(this:scopes:add h)
		(h:push scope)
		(set this:labels (ArrayDeque))
	)
	((pushScope code CodeAttr label HashMap) void
		(define output (!= code null))
		(define i 0)
		(while (!= i (this:scopes:size))
			((this:scopes:get i):push (HashMap))
			(set i (+ i 1))
		)
		(this:labels:push label)
		(if output (code:pushScope))
	)
	((popScope code CodeAttr) void
		(define output (!= code null))
		(define i 0)
		(while (!= i (this:scopes:size))
			((this:scopes:get i):pop)
			(set i (+ i 1))
		)
		(this:labels:pop)
		(if output (code:popScope))
	)
	((getVar tok VToken) AVar
		(define scopes (this:scopes:get tok:macro))
		(define found AVar null)
		(define it (scopes:iterator))
		(while (&& (it:hasNext) (= found null))
			(define vars (it:next))
			(if (vars:containsKey tok:val)
				(set found (vars:get tok:val))
			)
		)
		found
	)
	((getLabel name String) Label
		(define found Label null)
		(define it Iterator (this:labels:iterator))
		(while (&& (it:hasNext) (= found null))
			(define vars HashMap (it:next))
			(if (vars:containsKey name)
				(set found (vars:get name))
			)
		)
		found
	)
	((newVar code CodeAttr tok VToken type Type) Variable
		(define output (!= code null))
		(define name tok:val)
		(define var Variable (if output (code:addLocal (type:getRawType) name) null))
		((as HashMap ((this:scopes:get tok:macro):getFirst)):put name (Var var type))
		var
	)
	((getType tok Token) Type
		(this:ci:getType tok)
	)
	((compileMethodBody h Handler) void
		(if (! (this:method:isAbstract))
			(begin
				(define tok this:block)
				(Compiler:transformBlock tok this)

				(this:pushScope null tok:labels)
				(h:compileAll tok:toks 0 (- (tok:toks:size) 1) this null Type:voidType)
				(h:compile (tok:toks:get (- (tok:toks:size) 1)) this null (this:method:getReturnType))
				(this:popScope null)

				(define filter (BridgeFilter this:method))
				(filter:searchAll)

				(define code (this:method:startCode))
				(this:pushScope code tok:labels)
				(h:compileAll tok:toks 0 (- (tok:toks:size) 1) this code Type:voidType)
				(define ret (h:compile (tok:toks:get (- (tok:toks:size) 1)) this code (this:method:getReturnType)))
				(this:popScope code)

				(if (&& (!= ret Compiler:returnType) (code:reachableHere))
					(code:emitReturn)
				)
			)
		)
	)
	((compileMethodBody) void
		(this:compileMethodBody GenHandler:inst)
	)
)

(define-class MethodInfo (AMethodInfo)
	((<init> ci ClassInfo block BlockToken method Method scope HashMap) void
		(AMethodInfo:<init> ci block method scope)
	)
)

(define-class MacroInfo (AMethodInfo)
	((<init> ci ClassInfo block BlockToken method Method scope HashMap) void
		(AMethodInfo:<init> ci block method scope)
	)
)

(define-class IncludeInfo (AMethodInfo)
	((<init> ci ClassInfo block BlockToken method Method scope HashMap) void
		(AMethodInfo:<init> ci block method scope)
	)
)

(define-class IncludeToken (Token)
	(mi IncludeInfo)
	(ret Token)
	((<init> line int mi IncludeInfo) void
		(Token:<init> line)
		(set this:mi mi)
	)
)

(define-class ObjectToken (Token) 'public
	(ci ClassInfo)
	(captured AVar[])
	(t Type)
	(params Type[])
	((<init> line int toks List{Token}) void
		(Token:<init> line toks)
	)
)

(define-class LambdaToken (ObjectToken) 'public
	((<init> line int toks List{Token}) void
		(ObjectToken:<init> line toks)
	)
)

(define-class MacroCallToken (Token) 'public
	(ret Token)
	((<init> line int toks List{Token}) void
		(Token:<init> line toks)
	)
)

(define-class Goto (Emitter)
	(label Label)
	((<init> label Label) void (Emitter:<init>) (set this:label label))
	((emit h Handler mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(if (&& output (code:reachableHere)) (code:emitGoto this:label))
		Type:voidType
	)
)

(define-class Null (Emitter)
	((<init>) void (Emitter:<init>))
	((emit h Handler mi AMethodInfo code CodeAttr needed Type) Type 'public (if (! (= code null)) (code:emitPushNull)) Type:nullType)
)

(define-class LoadAVar (Emitter)
	(avar AVar)
	((<init> avar AVar) void
		(Emitter:<init>)
		(set this:avar avar)
	)
	((emit h Handler mi AMethodInfo code CodeAttr needed Type) Type 'public
		(this:avar:load code)
	)
)

(define-class Emitters (Emitter)
	(emitters List{Emitter})
	((<init> emitters Emitter[]) void (Emitter:<init>) (set this:emitters (Arrays:asList emitters)))
	((<init> emitters List{Emitter}) void (Emitter:<init>) (set this:emitters emitters))
	((emitAll h Handler mi AMethodInfo code CodeAttr needed Object) Type[] 'public
		(define types (Type[] len:(this:emitters:size)))
		(define i 0)
		(while (< i (alen types))
			(define emitter (this:emitters:get i))
			(if (!= emitter null)
				(begin
					(aset types i (emitter:emit h mi code
						(if (instance? needed Type[])
							(aget (as Type[] needed) i)
							(as Type needed)
						)
					))
				)
			)
			(set i (+ i 1))
		)
		types
	)
)

(define-class MethodCall ()
	(m Method)
	(t Type)
	(tvs Map{TypeVariable Type})
	((<init> m Method t Type tvs Map{TypeVariable Type}) void
		(Object:<init>)
		(set this:m m)
		(set this:t t)
		(set this:tvs tvs)
	)
)

(define-class AFilter ()
	(pt Type)
	((<init> pt Type) void
		(Object:<init>)
		(set this:pt pt)
	)
	((select method Method generic Type) void 'abstract)
	((search t Type) void
		(define m ((as ClassType (t:getRawType)):getDeclaredMethods))
		(while (!= m null)
			(this:select m t)
			(set m (m:getNext))
		)
	)
	((searchAll) void
		(if (instance? this:pt ArrayType)
			(this:searchArray)
			(begin
				(define t this:pt)
				(define supers (ArrayList{Type}))
				(while (!= t null)
					(this:search t)
					(supers:add t)
					(set t (Compiler:resolveType t ((as ClassType (t:getRawType)):getGenericSuperclass)))
				)
				(define i 0)
				(while (!= i (supers:size))
					(define super (supers:get i))
					(define intfs ((as ClassType (super:getRawType)):getGenericInterfaces))
					(define j 0)
					(if (!= intfs null)
						(while (!= j (alen intfs))
							(this:search (Compiler:resolveType super (aget intfs j)))
							(set j (+ j 1))
						)
					)
					(set i (+ i 1))
				)
			)
		)
	)
	((searchDeclared) void
		(this:search this:pt)
	)
	((searchArray) void
		(this:search Type:objectType)
	)
)

(define-class BridgeFilter (AFilter)
	(m Method)
	((<init> m Method) void
		(AFilter:<init> (m:getDeclaringClass))
		(set this:m m)
	)
	((select method Method generic Type) void
		(define p1 (this:m:getGenericParameterTypes))
		(define p2 (method:getGenericParameterTypes))
		(define r1 (this:m:getReturnType))
		(define r2 (method:getReturnType))
		(if (&&
				((method:getName):equals (this:m:getName))
				(= (alen p1) (alen p2))
				(! (Type:isSame generic this:pt))
			)
			(begin
				(define n (alen p1))
				(define i 0)
				(define diff (! (Type:isSame (r1:getRawType) (r2:getRawType))))
				(define overrides true)
				(while (&& overrides (!= i n))
					(if (&&
							(! diff)
							(! (Type:isSame ((aget p1 i):getRawType) ((aget p2 i):getRawType)))
						)
						(set diff true)
					)
					(set overrides (Type:isSame (Compiler:resolveType generic (aget p1 i)) (Compiler:resolveType generic (aget p2 i))))
					(set i (+ i 1))
				)
				(if (&& diff overrides)
					(Compiler:generateBridgeMethod this:m p2 r2)
				)
			)
		)
	)
)

(define-class MFilter (AFilter)
	(methods0 ArrayList{MethodCall})
	(methods1 ArrayList{MethodCall})
	(varmethods ArrayList{MethodCall})
	(name String)
	(types Type[])
	((<init> name String types Type[] pt Type) void
		(AFilter:<init> pt)
		(set this:methods0 (ArrayList))
		(set this:methods1 (ArrayList))
		(set this:varmethods (ArrayList))
		(set this:name name)
		(set this:types types)
	)
	((select method Method generic Type) void
		(define c (method:getDeclaringClass))
		(if (&&
				((method:getName):equals this:name)
				(||
					(! (c:isInterface))
					((as ClassType (generic:getRawType)):isInterface)
					(! (method:isAbstract))
				)
				(= 0 (& (method:getModifiers) Access:SYNTHETIC))
			)
			(begin
				(define varargs (!= (& (method:getModifiers) Access:TRANSIENT) 0))
				(define na (alen this:types))
				(define params (method:getGenericParameterTypes))
				(define np (alen params))
				(if (|| (= na np) (&& varargs (>= na (- np 1))))
					(begin
						(define arrayNeeded
							(&&
								varargs
								(||
									(= na (- np 1))
									(!= (Compiler:arrayDim (aget params (- np 1))) (Compiler:arrayDim (aget this:types (- np 1))))
								)
							)
						)
						(define reals
							(if arrayNeeded
								(begin
									(define types (Type[] len:np))
									(define default (= na (- np 1)))
									(System:arraycopy this:types 0 types 0 (- np 1))
									(aset types (- np 1)
										(if default
											(aget params (- np 1))
											(ArrayType (aget this:types (- np 1)))
										)
									)
									types
								)
								this:types
							)
						)
						(define tvs (Compiler:unresolveTvs (method:getTypeParameters) params reals))
						(define stop false)
						(define maxLevel 0)
						(define i 0)
						(while (! (|| stop (= i (alen this:types))))
							(define at
								(Compiler:resolveType tvs generic
									(if (&&
											arrayNeeded
											(>= i (- np 1))
										)
										(as ArrayType (aget params (- np 1))):elements
										(aget params i)
									)
								)
							)
							(define level (at:compare (aget this:types i)))
							(if (> level maxLevel)
								(set maxLevel level)
							)
							(if (< level 0)
								(set stop true)
							)
							(set i (+ i 1))
						)
						(define mc (MethodCall method generic tvs))
						(if (! stop)
							(if varargs
								(this:varmethods:add mc)
								(if (= maxLevel 0)
									(this:methods0:add mc)
									(this:methods1:add mc)
								)
							)
						)
					)
				)
			)
		)
	)
	((getMethodCall) MethodCall
		(if (= (this:methods0:size) 0)
			(if (= (this:methods1:size) 0)
				(if (= (this:varmethods:size) 0)
					null
					(this:varmethods:get 0)
				)
				(this:methods1:get 0)
			)
			(this:methods0:get 0)
		)
	)
	((getMethod) Method
		(define mc (this:getMethodCall))
		(if (= mc null)
			null
			mc:m
		)
	)
)

(define-class Handler () 'public
	((<init>) void (Object:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool false)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type null)
	((compile tok Token mi AMethodInfo code CodeAttr needed Type) Type
		(this:compile null tok mi code needed)
	)
	((compile tok Token mi AMethodInfo code CodeAttr) Type 'public
		(this:compile tok mi code Compiler:unknownType)
	)
	((compileAll toks List{Token} i int e int mi AMethodInfo code CodeAttr needed Object) Type[]
		(define l (toks:size))
		(define types (Type[] len: (- e i)))
		(define j i)
		(while (! (>= j e))
			(aset types (- j i)
				(this:compile (toks:get j) mi code
					(if (instance? needed Type[])
						(aget (as Type[] needed) (- j i))
						needed
					)
				)
			)
			(set j (+ j 1))
		)
		types
	)
	((tryHandlers h Handler default Type handlers List{Handler} tok Token mi AMethodInfo code CodeAttr needed Type) Type 'static
		(define i 0)
		(define type default)
		(define run true)
		(while (&& run (< i (handlers:size)))
			(define s (handlers:get i))
			(if (s:valid tok mi needed)
				(begin
					(set type (s:compile h tok mi code needed))
					(set run false)
				)
			)
			(set i (+ i 1))
		)
		type
	)
)

(define-class GenHandler (Handler) 'public
	(inst GenHandler 'static 'public)
	((<clinit>) void 'static (set GenHandler:inst (GenHandler)))
	(handlers List{Handler})
	((<init> handlers List{Handler}) void
		(Handler:<init>)
		(set this:handlers handlers)
	)
	((<init>) void
		(GenHandler:<init> (Arrays:asList (Object[]
			SHandler:inst
			CHandler:inst
			NHandler:inst
			ColonHandler:inst
			QuasiHandler:inst
			ConstsHandler:inst
			VHandler:inst
			IncludeHandler:inst
			ObjectHandler:inst
			MacroCallHandler:inst
			BlockHandler:inst
		)))
	)
	((compile tok Token mi AMethodInfo code CodeAttr needed Type) Type
		(define output (!= code null))
		(if output (code:putLineNumber "abc.java" tok:line))
		(try
			(begin
				(define type (Handler:tryHandlers this Type:voidType this:handlers tok mi code needed))
				(Compiler:castMaybe code type needed)
			)
			e
			(begin
				(System:out:println ("Error compiling line ":concat (Integer:toString tok:line)))
				(throw e)
			)
		)
	)
)

(define-class MacroCallHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set MacroCallHandler:inst (MacroCallHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok MacroCallToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define tok MacroCallToken tok)
		(if (= tok:ret null)
			(begin
				(define name (as VToken (tok:toks:get 0)):val)
				(define o 4)
				(define l (- (tok:toks:size) 1))
				(define types (Type[] len:(+ o l) (Type:getType "AMethodInfo") (Type:getType "gnu.bytecode.Type") Type:intType (Type:getType "Handler")))
				(define j 0)
				(while (!= j l)
					(aset types (+ o j) (Type:getType "Token"))
					(set j (+ j 1))
				)
				(define method Method null)
				(define ci ClassInfo null)
				(define i 0)
				(while (= method null)
					(set ci ((mi:ci:fs:macroNames:get name):get i))
					(define filter (MFilter name types ci:c))
					(filter:searchDeclared)
					(set method (filter:getMethod))
					(set i (+ i 1))
				)
				(define params (method:getGenericParameterTypes))
				(define classes (Class[] len:(alen params)))
				(set j 0)
				(while (!= j (alen params))
					(aset classes j ((aget params j):getReflectClass))
					(set j (+ j 1))
				)
				(define args (ArrayList (Arrays:asList (Object[] mi needed (mi:scopes:size) h))))
				(args:addAll
					(if (&& (> (alen params) 0) (instance? (aget params (- (alen params) 1)) ArrayType))
						(begin
							(define var (- (alen params) o))
							(define al (ArrayList (tok:toks:subList 1 var)))
							(define out (Token[] len:(- (tok:toks:size) var)))
							((tok:toks:subList var (tok:toks:size)):toArray out)
							(al:add out)
							al
						)
						(tok:toks:subList 1 (tok:toks:size))
					)
				)
				(set tok:ret (as Token ((ci:rc:getMethod name classes):invoke null (args:toArray))))
			)
		)
		(mi:scopes:add (ArrayDeque))
		(define out (h:compile tok:ret mi code needed))
		(mi:scopes:remove (- (mi:scopes:size) 1))
		out
	)
)

(define-class IncludeHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set IncludeHandler:inst (IncludeHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok IncludeToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define tok IncludeToken tok)
		(if (= tok:ret null)
			(set tok:ret
				((mi:ci:fs:includes:rc:getMethod ((as IncludeToken tok):mi:method:getName) (Class[]
					(class AMethodInfo)
					(class gnu.bytecode.Type)
					Integer:TYPE
					(class Handler)
				)):invoke null (Object[] mi needed 1 h))
			)
		)
		(h:compile tok:ret mi code needed)
	)
)

(define-class SHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set SHandler:inst (SHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok SToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(if output (code:emitPushString (as SToken tok):val))
		Type:javalangStringType
	)
)

(define-class CHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set CHandler:inst (CHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok CToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define c int (as CToken tok):val)
		(if (! (instance? needed PrimType))
			(begin
				(if output (code:emitPushInt c))
				Type:charType
			)
			(begin
				(if output (code:emitPushConstant c needed))
				needed
			)
		)
	)
)

(define-class NHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set NHandler:inst (NHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok NToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define tok NToken tok)
		(if (instance? tok:val Double)
			(begin
				(if output (code:emitPushDouble (as Double tok:val)))
				Type:doubleType
			)
			(begin
				(if (! (instance? needed PrimType))
					(begin
						(if output (code:emitPushInt (as Integer tok:val)))
						Type:intType
					)
					(begin
						(if output (code:emitPushConstant (as Integer tok:val) needed))
						needed
					)
				)
			)
		)
	)
)

(define-class ColonHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ColonHandler:inst (ColonHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok ColonToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define t (h:compile first mi code Compiler:unknownType))
		(define class ClassType (t:getRawType))
		(define field Field (class:getField (as VToken (tok:toks:get 1)):val -1))
		(if (field:getStaticFlag)
			(if output (code:emitGetStatic field))
			(if output (code:emitGetField field))
		)
		(define out (Compiler:resolveType t (field:getType)))
		(if (!= out Type:voidType)
			(if output (code:emitCheckcast (out:getRawType)))
		)
		out
	)
)

(define-class QuasiHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set QuasiHandler:inst (QuasiHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok QuoteToken)
	)
	((compileQuasi h Handler o Object mi AMethodInfo code CodeAttr needed Type) Type
		(define output (!= code null))
		(define result
			(if (= o null)
				(begin
					(if output (code:emitPushNull))
					Type:nullType
				)
			(if (instance? o Token)
				(begin
					(define tok Token o)
					(define t (if (instance? tok UnquoteToken) (h:compile (tok:toks:get 0) mi null Compiler:unknownType) null))
					(if (&& (instance? tok UnquoteToken) (|| (= t (Type:getType "Token")) (&& (instance? t ArrayType) (= (as ArrayType t):elements (Type:getType "Token"))) ((t:getRawType):isSubtype (Type:getType "java.util.List"))))
						(h:compile (tok:toks:get 0) mi code Compiler:unknownType)
						(if (instance? tok UnquoteToken)
							(begin
								(define const (tok:toks:get 0))
								(define t (h:compile const mi null Compiler:unknownType))
								(define type ClassType
									(if (as UnquoteToken tok):s
										(Type:getType "SToken")
									(if (= t Type:charType)
										(Type:getType "CToken")
									(if (instance? t PrimType)
										(Type:getType "NToken")
										(Type:getType "VToken")
									)
									)
									)
								)
								(if output (code:emitNew type))
								(if output (code:emitDup))
								(if output (code:emitInvoke (type:getDeclaredMethod "<init>" 0)))
								(if output (code:emitDup))
								(h:compile const mi code Type:objectType)
								(if output (code:emitPutField (type:getField "val")))
								(Type:getType "Token")
							)	
							(begin
								(define type ClassType (Type:getType ((o:getClass):getName)))
								(if output (code:emitNew type))
								(if output (code:emitDup))
								(if output (code:emitInvoke (type:getDeclaredMethod "<init>" 0)))
								(define super type)
								(while (!= super null)
									(define field (super:getFields))
									(while (!= field null)
										(if (&&
												(!= (& (field:getModifiers) Access:PUBLIC) 0)
												(= (& (field:getModifiers) Access:TRANSIENT) 0)
											)
											(begin
												(if output (code:emitDup))
												(if (= (field:getType) Type:intType)
													(this:compileQuasi h ((field:getReflectField):getInt tok) mi code (field:getType))
													(this:compileQuasi h ((field:getReflectField):get tok) mi code (field:getType))
												)
												(if output (code:emitPutField field))
											)
										)
										(set field (field:getNext))
									)
									(set super (super:getSuperclass))
								)
								(if (= type (Type:getType "VToken"))
									(begin
										(if output (code:emitDup))
										(if output (code:emitLoad (code:getArg 2)))
										(if output (code:emitPutField (type:getField "macro")))
									)
								)
								(Type:getType "Token")
							)
						)
					)
				)
			(if (instance? o String)
				(begin
					(if output (code:emitPushString (as String o)))
					Type:javalangStringType
				)
			(if (instance? o Integer)
				(begin
					(if output (code:emitPushInt (as Integer o)))
					Type:intType
				)
			(if (instance? o Boolean)
				(begin
					(if output (code:emitPushInt (as int (as Boolean o))))
					Type:booleanType
				)
			(if (instance? o List)
				(begin
					(define o List o)
					(define al ClassType (Type:getType "java.util.ArrayList"))
					(if output (code:emitNew al))
					(if output (code:emitDup))
					(if output (code:emitInvoke (al:getMethod "<init>" (Type[]))))
					(define i 0)
					(while (!= i (o:size))
						(define t (this:compileQuasi h (o:get i) mi null Compiler:unknownType))
						(if (= t (Type:getType "Token"))
							(begin
								(if output (code:emitDup))
								(this:compileQuasi h (o:get i) mi code Compiler:unknownType)
								(if output (code:emitInvoke (al:getMethod "add" (Type[] Type:objectType))))
								(if output (code:emitPop 1))
							)
						(if (instance? t ArrayType)
							(begin
								(if output (code:emitDup))
								(this:compileQuasi h (o:get i) mi code Compiler:unknownType)
								(if output (code:emitInvoke ((as ClassType (Type:getType "java.util.Collections")):getDeclaredMethod "addAll" 2)))
								(if output (code:emitPop 1))
							)
							(begin
								(if output (code:emitDup))
								(this:compileQuasi h (o:get i) mi code Compiler:unknownType)
								(if output (code:emitInvoke ((as ClassType (Type:getType "java.util.List")):getDeclaredMethod "addAll" 1)))
								(if output (code:emitPop 1))
							)
						)
						)
						(set i (+ i 1))
					)
					al
				)
				(throw (Exception))
			)
			)
			)
			)
			)
			)
		)
		(Compiler:castMaybe code result needed)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define out (this:compileQuasi h (tok:toks:get 0) mi code (Type:getType "Token")))
		(if output (code:emitLoad (code:getArg 0)))
		(if output (code:emitInvoke ((ClassType:make "Compiler"):getDeclaredMethod "transformBlock" 2)))
		out
	)
)

(define-class ConstsHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ConstsHandler:inst (ConstsHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(|| (tok:what:equals "true") (tok:what:equals "false") (tok:what:equals "null"))
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(if (tok:what:equals "true")
			(begin
				(if output (code:emitPushInt 1))
				Type:booleanType
			)
		(if (tok:what:equals "false")
			(begin
				(if output (code:emitPushInt 0))
				Type:booleanType
			)
			(begin
				(if output (code:emitPushNull))
				Type:nullType
			)
		)
		)
	)
)

(define-class VHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set VHandler:inst (VHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok VToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define class ClassType (mi:getType tok))
		(if (= class null)
			(begin
				(define found (mi:getVar (as VToken tok)))
				(found:load code)
			)
			class
		)
	)
)

(define-class CaptureVHandler (Handler)
	(enc AMethodInfo)
	(captured Map{AVar Field})
	(n int)
	((<init> enc AMethodInfo) void
		(Handler:<init>)
		(set this:enc enc)
		(set this:captured (LinkedHashMap))
	)
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok VToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define class ClassType (mi:getType tok))
		(if (= class null)
			(begin
				(define found (mi:getVar (as VToken tok)))
				(if (= found null)
					(begin
						(define outer (this:enc:getVar (as VToken tok)))
						(if (= outer null) (throw (Exception)))
						(define field
							(if output
								(if (this:captured:containsKey outer)
									(this:captured:get outer)
									(begin
										(define new (mi:ci:c:addField ("captured$":concat (Integer:toString this:n)) outer:type Access:SYNTHETIC))
										(set this:n (+ this:n 1))
										(this:captured:put outer new)
										new
									)
								)
								null
							)
						)
						(if output (code:emitPushThis))
						(if output (code:emitGetField field))
						outer:type
					)
					(found:load code)
				)
			)
			class
		)
	)
)

(define-class BeginBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set BeginBlockHandler:inst (BeginBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "begin")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first VToken (tok:toks:get 0))
		;(define newLevel (= first:macro (mi:scopes:size)))
		;(if (< (mi:scopes:size) first:macro)
		;	(throw (Exception))
		;)
		;(if newLevel (mi:scopes:add (ArrayDeque)))
		(mi:pushScope code (as BlockToken tok):labels)
		(h:compileAll tok:toks 1 (- (tok:toks:size) 1) mi code Type:voidType)
		(define type (h:compile (tok:toks:get (- (tok:toks:size) 1)) mi code needed))
		;(if newLevel (mi:scopes:remove (- (mi:scopes:size) 1)))
		(mi:popScope code)
		type
	)
)

(define-class LabelBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set LabelBlockHandler:inst (LabelBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "label")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define label (mi:getLabel (as VToken (tok:toks:get 1)):val))
		(if output (label:define code))
		Type:voidType
	)
)

(define-class GotoBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set GotoBlockHandler:inst (GotoBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "goto")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define label (mi:getLabel (as VToken (tok:toks:get 1)):val))
		(if output (code:emitGoto label))
		Type:voidType
	)
)

(define-class DefineBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set DefineBlockHandler:inst (DefineBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "define")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first VToken (tok:toks:get 0))
		(define type (mi:getType (tok:toks:get 2)))
		(if (= type null)
			(set type (h:compile (tok:toks:get 2) mi code Compiler:unknownType))
		(if (= (tok:toks:size) 4)
			(begin
				(define type Type (mi:getType (tok:toks:get 2)))
				(h:compile (tok:toks:get 3) mi code type)
				type
			)
			(begin
				(define type Type (mi:getType (tok:toks:get 2)))
				(if output (code:emitPushDefaultValue needed))
				type
			)
		)
		)
		(define var (mi:newVar code (as VToken (tok:toks:get 1)) type))
		(if output (code:emitStore var))
		Type:voidType
	)
)

(define-class TryBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set TryBlockHandler:inst (TryBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "try")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(if output (code:emitTryStart false null))
		(define type (h:compile (tok:toks:get 1) mi code needed))
		(define var (mi:newVar code (as VToken (tok:toks:get 2)) Type:javalangThrowableType))
		(if output (code:emitCatchStart var))
		(h:compile (tok:toks:get 3) mi code Compiler:unknownType)
		(if output (code:emitCatchEnd))
		(if output (code:emitTryCatchEnd))
		type
	)
)

(define-class InstanceBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set InstanceBlockHandler:inst (InstanceBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "instance?")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(h:compile (tok:toks:get 1) mi code Compiler:unknownType)
		(if output (code:emitInstanceof (mi:getType (tok:toks:get 2))))
		Type:booleanType
	)
)

(define-class SetBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set SetBlockHandler:inst (SetBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "set")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define out (tok:toks:get 1))
		(if (instance? out ColonToken)
			(begin
				(define first (out:toks:get 0))
				(define t (h:compile first mi code Compiler:unknownType))
				(define class ClassType (t:getRawType))
				(define field Field (class:getField (as VToken (out:toks:get 1)):val -1))
				(h:compile (tok:toks:get 2) mi code (Compiler:resolveType t (field:getType)))
				(if (field:getStaticFlag)
					(if output (code:emitPutStatic field))
					(if output (code:emitPutField field))
				)
			)
			(begin
				(define var (mi:getVar (as VToken (tok:toks:get 1))))
				(h:compile (tok:toks:get 2) mi code var:type)
				(var:store code)
			)
		)
		Type:voidType
	)
)

(define-class ASetBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ASetBlockHandler:inst (ASetBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "aset")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define type ArrayType (h:compile (tok:toks:get 1) mi code Compiler:unknownType))
		(h:compile (tok:toks:get 2) mi code Compiler:unknownType)
		(h:compile (tok:toks:get 3) mi code type:elements)
		(if output (code:emitArrayStore))
		Type:voidType
	)
)

(define-class AGetBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set AGetBlockHandler:inst (AGetBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "aget")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define type ArrayType (h:compile (tok:toks:get 1) mi code Compiler:unknownType))
		(h:compile (tok:toks:get 2) mi code Type:intType)
		(if output (code:emitArrayLoad))
		type:elements
	)
)

(define-class ALenBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ALenBlockHandler:inst (ALenBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "alen")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(h:compile (tok:toks:get 1) mi code Compiler:unknownType)
		(if output (code:emitArrayLength))
		Type:intType
	)
)

(define-class AsBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set AsBlockHandler:inst (AsBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "as")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define cast (mi:getType (tok:toks:get 1)))
		(h:compile (tok:toks:get 2) mi code cast)
	)
)

(define-class BinOpsBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set BinOpsBlockHandler:inst (BinOpsBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(Compiler:binOps:containsKey first:val)
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first VToken (tok:toks:get 0))
		(define otype (Compiler:numericOpType (h:compileAll tok:toks 1 (tok:toks:size) mi null Compiler:unknownType)))
		(h:compile (tok:toks:get 1) mi code otype)
		(define i 2)
		(while (!= i (tok:toks:size))
			(h:compile (tok:toks:get i) mi code otype)
			(if output (code:emitBinop (Compiler:binOps:get first:val) otype))
			(set i (+ i 1))
		)
		otype
	)
)

(define-class IfBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set IfBlockHandler:inst (IfBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "if")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(Compiler:emitIf h false tok 1 (tok:toks:get 2) (if (= (tok:toks:size) 4) (tok:toks:get 3) null) mi code needed)
	)
)

(define-class Add1 (Emitter)
	(e Emitter)
	((<init> e Emitter) void
		(Emitter:<init>)
		(set this:e e)
	)
	((emit h Handler mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(this:e:emit h mi code needed)
		(if output (code:emitPushInt 1))
		(if output (code:emitAdd Type:intType))
		Type:intType
	)
)

;(define-class MacroBlockHandler (Handler)
	;(inst Handler 'static)
	;((<clinit>) void 'static (set MacroBlockHandler:inst (MacroBlockHandler)))
	;((<init>) void (Handler:<init>))
	;((valid tok Token mi AMethodInfo needed Type) bool 'public
		;(if (instance? (tok:toks:get 0) VToken)
			;(begin
				;(define first VToken (tok:toks:get 0))
				;(first:val:equals "macro")
			;)
			;false
		;)
	;)
	;((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		;(define output (!= code null))
		;(define first (tok:toks:get 0))
		;(define name String (as VToken (tok:toks:get 1)):val)
		;(define emitters List{Emitter} (ArrayList (Arrays:asList (Emitter[]
			;(LoadAVar (Arg 0 (Type:getType "AMethodInfo")))
			;(LoadAVar (Arg 1 (Type:getType "gnu.bytecode.Type")))
			;(Add1 (LoadAVar (Arg 2 Type:intType)))
		;))))
		;(emitters:addAll (Emitters:tokenEmitters tok:toks 2 (tok:toks:size)))
		;(define types ((Emitters emitters):emitAll h mi null Compiler:unknownType))
		;(define macro ClassInfo null)
		;(define i 0)
		;(while (= macro null)
			;(define test ((mi:ci:fs:macroNames:get name):get i))
			;(define filter (MFilter name types test:c))
			;(filter:searchDeclared)
			;(if (!= (filter:getMethod) null)
				;(set macro test)
			;)
		;)
		;(Compiler:emitInvoke h name macro:c (Emitters emitters) mi code Compiler:unknownType)
	;)
;)

(define-class WhileBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set WhileBlockHandler:inst (WhileBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "while")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(mi:pushScope code (as BlockToken tok):labels)
		(define start Label (Label))
		(if output (start:define code))
		(define t (Compiler:emitIf h false tok 1 (Emitters (Emitter[] (Emitters (tok:toks:subList 2 (tok:toks:size))) (Goto start))) null mi code needed))
		(mi:popScope code)
		t
	)
)

(define-class CompareBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set CompareBlockHandler:inst (CompareBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(Compiler:isCompare first:val)
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(Compiler:emitIf_ h false tok 1 (tok:toks:size) (as VToken first):val (Token tok:line -1 "true") (Token tok:line -1 "false") mi code Type:booleanType)
	)
)

(define-class ColonBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ColonBlockHandler:inst (ColonBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) ColonToken)
			true
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define name (as VToken (first:toks:get 1)):val)
		(if (name:equals "<init>") (if output (code:emitPushThis)))
		(Compiler:emitInvoke h name (h:compile (first:toks:get 0) mi code Compiler:unknownType) (Emitters (tok:toks:subList 1 (tok:toks:size))) mi code Compiler:unknownType)
	)
)

(define-class DefaultBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set DefaultBlockHandler:inst (DefaultBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		true
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define type Type (mi:getType first))
		(if (= type null)
			(begin
				(define t (h:compile first mi code Compiler:unknownType))
				(define c ClassType (t:getRawType))
				(define method (c:getDeclaredMethods))
				(define i 0)
				(define tocall Method null)
				(while (!= method null)
					(if (&& (! ((method:getName):equals "<init>")) (= 0 (& Access:SYNTHETIC (method:getModifiers))))
						(if (= tocall null)
							(set tocall method)
							(throw (Exception))
						)
					)
					(set method (method:getNext))
				)
				(Compiler:emitInvoke h (tocall:getName) t (Emitters (tok:toks:subList 1 (tok:toks:size))) mi code Compiler:unknownType)
			)
			(if (instance? type ArrayType)
				(begin
					(define array ArrayType type)
					(define len Token (if (> (tok:toks:size) 1) (tok:toks:get 1) null))
					(define i0
						(if (&& (!= len null) (instance? len ColonToken) ((as VToken (len:toks:get 0)):val:equals "len"))
							(begin (h:compile (len:toks:get 1) mi code Compiler:unknownType) 2)
							(begin (if output (code:emitPushInt (- (tok:toks:size) 1))) 1)
						)
					)
					(if output (code:emitNewArray (array:elements:getRawType)))
					(define i i0)
					(while (!= i (tok:toks:size))
						(if output (code:emitDup))
						(if output (code:emitPushInt (- i i0)))
						(h:compile (tok:toks:get i) mi code array:elements)
						(if output (code:emitArrayStore))
						(set i (+ i 1))
					)
					type
				)
				(begin
					(define class ClassType (type:getRawType))
					(if output (code:emitNew class))
					(if output (code:emitDup))
					(Compiler:emitInvoke h "<init>" type (Emitters (tok:toks:subList 1 (tok:toks:size))) mi code Compiler:unknownType)
					type
				)
			)
		)
	)
)

(define-class ThrowBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ThrowBlockHandler:inst (ThrowBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "throw")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(h:compile (tok:toks:get 1) mi code Compiler:unknownType)
		(if output (code:emitThrow))
		Type:voidType
	)
)

(define-class ClassBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ClassBlockHandler:inst (ClassBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "class")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(if output (code:emitPushClass (as ObjectType (mi:getType (tok:toks:get 1)))))
		Type:javalangClassType
	)
)

(define-class SynchronizedBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set SynchronizedBlockHandler:inst (SynchronizedBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "synchronized")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(h:compile (tok:toks:get 1) mi code Compiler:unknownType)
		(mi:pushScope code (as BlockToken tok):labels)
		(if output (code:emitDup))
		(if output (code:emitMonitorEnter))
		(h:compileAll tok:toks 2 (- (tok:toks:size) 1) mi code Type:voidType)
		(define type (h:compile (tok:toks:get (- (tok:toks:size) 1)) mi code needed))
		(if output (code:emitMonitorExit))
		(mi:popScope code)
		type
	)
)

(define-class TypeBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set TypeBlockHandler:inst (TypeBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "type")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(if output (code:emitLoad (code:getArg 3)))
		(h:compile (tok:toks:get 1) mi code Compiler:unknownType)
		(if output (code:emitLoad (code:getArg 0)))
		(if output (code:emitInvoke ((ClassType:make "Compiler"):getDeclaredMethod "transformBlock" 2)))
		(if output (code:emitLoad (code:getArg 0)))
		(if output (code:emitPushNull))
		(if output (code:emitInvoke ((ClassType:make "Handler"):getDeclaredMethod "compile" 3)))
		(Type:getType "gnu.bytecode.Type")
	)
)

(define-class ReturnBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ReturnBlockHandler:inst (ReturnBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "return")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(if (= (tok:toks:size) 2)
			(h:compile (tok:toks:get 1) mi code Compiler:unknownType)
		)
		(if output (code:emitReturn))
		Compiler:returnType
	)
)

(define-class ObjectHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ObjectHandler:inst (ObjectHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok ObjectToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define tok ObjectToken tok)
		(define lambda (instance? tok LambdaToken))
		(define ci tok:ci)
		(define super (tok:toks:get 1))
		(define FunctionN (&& lambda (instance? super BlockToken)))
		(define emitters
			(Emitters (if (|| lambda (! (instance? super BlockToken)))
				(ArrayList)
				(super:toks:subList 1 (super:toks:size))
			))
		)
		(if (= ci null)
			(begin
				(define handlers (ArrayList GenHandler:inst:handlers))
				(define capturedH (CaptureVHandler mi))
				(handlers:set (handlers:indexOf VHandler:inst) capturedH)
				(define h (GenHandler handlers))
				(if output
					(begin
						(set ci (ClassInfo (mi:ci:name:concat ("$":concat (Integer:toString mi:ci:anonymous))) mi:ci:fs))
						(set tok:ci ci)
						(mi:ci:fs:anonClasses:add ci)
						(set mi:ci:anonymous (+ mi:ci:anonymous 1))
					)
				)
				(if FunctionN
					(begin
						(define scope (HashMap))
						(define params (Compiler:getParams mi:ci super scope 0 1))
						(define generics (Type[] len:(+ (alen params) 1)))
						(System:arraycopy params 0 generics 0 (alen params))
						(define block (BlockToken tok:line (tok:toks:subList 2 (tok:toks:size))))
						(define fakemi (MethodInfo (ClassInfo null null mi:ci:fs) block null scope))
						(h:compileAll block:toks 0 (- (block:toks:size) 1) fakemi null Type:voidType)
						(define ret (Compiler:tryBox (h:compile (block:toks:get (- (block:toks:size) 1)) fakemi null Compiler:unknownType)))
						(aset generics (alen params) ret)
						(define t (ParameterizedType (as ClassType ((mi:ci:getType ("Function":concat (Integer:toString (alen params)))):getRawType)) generics))
						(set tok:t t)
						(if output
							(begin
								(define m (ci:c:addMethod "apply" params ret Access:PUBLIC))
								(ci:c:addInterface t)
								(define mi (MethodInfo ci block m scope))
								(mi:compileMethodBody h)
							)
						)
					)
				(if lambda
					(begin
						(define t (mi:getType super))
						(set tok:t t)
						(if output
							(begin
								(define sam ((as ClassType (t:getRawType)):checkSingleAbstractMethod))
								(define scope (HashMap))
								(define args (tok:toks:get 2))
								(define i 0)
								(define params (Type[] len:(args:toks:size)))
								(while (!= i (args:toks:size))
									(define arg VToken (args:toks:get i))
									(define param (Compiler:resolveType t (aget (sam:getGenericParameterTypes) i)))
									(scope:put arg:val (Arg (+ i 1) param))
									(aset params i param)
									(set i (+ i 1))
								)
								(ci:c:addInterface t)
								(define m (ci:c:addMethod (sam:getName) params (Compiler:resolveType t (sam:getReturnType)) Access:PUBLIC))
								(define block (BlockToken tok:line (tok:toks:subList 3 (tok:toks:size))))
								(define mi (MethodInfo ci block m scope))
								(mi:compileMethodBody h)
							)
						)
					)
					(begin
						(define t
							(if (instance? super BlockToken)
								(mi:getType (super:toks:get 0))
								(mi:getType super)
							)
						)
						(set tok:t t)
						(if output
							(begin
								(if ((as ClassType (t:getRawType)):isInterface)
									(ci:c:addInterface t)
									(ci:c:setSuper t)
								)
								(define i 2)
								(while (!= i (tok:toks:size))
									(ci:compileDef (tok:toks:get i))
									(set i (+ i 1))
								)
								(set i 0)
								(while (!= i (ci:methods:size))
									(define mi (ci:methods:get i))
									(mi:compileMethodBody h)
									(set i (+ i 1))
								)
							)
						)
					)
				)
				)
				(if output
					(begin
						(define superC (ci:c:getSuperclass))
						(define types (emitters:emitAll h mi null Compiler:unknownType))
						(define filter (MFilter "<init>" types superC))
						(filter:searchDeclared)
						(define superCons (filter:getMethod))
						(set tok:captured (AVar[] len:(capturedH:captured:size)))
						((capturedH:captured:keySet):toArray tok:captured)
						(define captured (Field[] len:(capturedH:captured:size)))
						((capturedH:captured:values):toArray captured)
						(define n (alen (superCons:getGenericParameterTypes)))
						(define params (Type[] len:(+ n (alen captured))))
						(System:arraycopy (superCons:getGenericParameterTypes) 0 params 0 n)
						(define i 0)
						(while (!= i (alen captured))
							(aset params (+ n i) ((aget captured i):getType))
							(set i (+ i 1))
						)
						(define cons (ci:c:addMethod "<init>" params Type:voidType 0))
						(define code (cons:startCode))
						(code:emitLoad (code:getArg 0))
						(set i 0)
						(while (!= i n)
							(code:emitLoad (code:getArg (+ i 1)))
							(set i (+ i 1))
						)
						(code:emitInvoke superCons)
						(set i 0)
						(while (!= i (alen captured))
							(code:emitPushThis)
							(code:emitLoad (code:getArg (+ n i 1)))
							(code:emitPutField (aget captured i))
							(set i (+ i 1))
						)
						(code:emitReturn)
					)
				)
			)
		)
		(if output (code:emitNew ci:c))
		(if output (code:emitDup))
		(if output
			(begin
				(define i 0)
				(while (!= i (alen tok:captured))
					(emitters:emitters:add (LoadAVar (aget tok:captured i)))
					(set i (+ i 1))
				)
				(Compiler:emitInvoke h "<init>" ci:c emitters mi code Compiler:unknownType)
			)
		)
		tok:t
	)
)

(define-class Nothing (Emitter)
	(inst Nothing 'static)
	((<clinit>) void 'static
		(set Nothing:inst (Nothing))
	)
	((<init>) void
		(Emitter:<init>)
	)
	((emit h Handler mi AMethodInfo code CodeAttr needed Type) Type 'public
		Type:voidType
	)
)

(define-class BlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set BlockHandler:inst (BlockHandler)))
	(handlers List{Handler})
	((<init> handlers List{Handler}) void
		(Handler:<init>)
		(set this:handlers handlers)
	)
	((<init>) void
		(BlockHandler:<init> (Arrays:asList (Object[]
			BeginBlockHandler:inst
			LabelBlockHandler:inst
			GotoBlockHandler:inst
			DefineBlockHandler:inst
			TryBlockHandler:inst
			InstanceBlockHandler:inst
			SetBlockHandler:inst
			ASetBlockHandler:inst
			AGetBlockHandler:inst
			ALenBlockHandler:inst
			AsBlockHandler:inst
			BinOpsBlockHandler:inst
			IfBlockHandler:inst
			WhileBlockHandler:inst
			CompareBlockHandler:inst
			ColonBlockHandler:inst
			ThrowBlockHandler:inst
			ClassBlockHandler:inst
			SynchronizedBlockHandler:inst
			TypeBlockHandler:inst
			ReturnBlockHandler:inst
			DefaultBlockHandler:inst
		)))
	)
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(&& (instance? tok BlockToken) (> (tok:toks:size) 0))
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define type (Handler:tryHandlers h null this:handlers tok mi code needed))
		type
	)
)
