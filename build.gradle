buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		classpath "com.stehno.vanilla:vanilla-core:0.4.0"
	}
}

ext.JARS = fileTree(dir: "lib", include: ["*.jar"])

def same(a, b) {
	def diffs = new com.stehno.vanilla.io.DirectoryDifferenceCollector().scan(a, b)	
	return diffs.filesOnlyInA.isEmpty() && diffs.filesOnlyInB.isEmpty() && diffs.modifiedFiles.isEmpty()
}

class SJavaCompile extends AbstractCompile {
	String targetCompatibility = "1.8"
	String sourceCompatibility = "1.8"
	@InputFiles
	def compilerClasspath = project.files("bin/main") + project.ext.JARS
	@OutputDirectory
	File destinationDir
	@InputFiles
	FileCollection classpath = project.files()
	@TaskAction
	void compile() {
		SJavaCompile.compile(project, classpath, source, destinationDir, compilerClasspath)
	}
	static def compile(project, classpath_, source, destinationDir, compilerClasspath) {
		def classpath__ = compilerClasspath + classpath_
		project.javaexec {
			classpath = classpath__
			main = "sjava.compiler.Main"
			args = ["build"] + source + ["-d", destinationDir]
		}
	}
}

def STD_MACROS = files("std/macros.sjava").collect { it.getCanonicalPath() }
def STD_LIB = files("std/FunctionN.sjava", "std/TupleN.sjava").collect { it.getCanonicalPath() }

task compiler(type: SJavaCompile) {
	doFirst { file("bin/main").deleteDir() }
	inputs.files(STD_MACROS)
	source = fileTree("compiler") + STD_LIB
	compilerClasspath = files("sjava.jar") + project.ext.JARS
	destinationDir = file("bin/main")
}

task compilerJar(type: Zip, dependsOn: [compiler]) {
	archiveName = "${projectDir}/sjava.jar"
	from(file("MANIFEST.MF"), { into("META-INF") })
	from(fileTree("bin/main/sjava/compiler"), { into("sjava/compiler") })
	from(fileTree("bin/main/sjava/std"), { into("sjava/std") })
}

task compiler2(type: SJavaCompile, dependsOn: [compiler]) {
	doFirst { file("bin/compiler2").deleteDir() }
	inputs.files(STD_MACROS)
	source = fileTree("compiler") + STD_LIB
	destinationDir = file("bin/compiler2")
}

task compiler3(type: SJavaCompile, dependsOn: [compiler]) {
	doFirst { file("bin/compiler3").deleteDir() }
	inputs.files(STD_MACROS)
	source = fileTree("compiler") + STD_LIB
	destinationDir = file("bin/compiler3")
}

task diff(dependsOn: [compiler2, compiler3]) {
	doLast {
		def good = same(file("bin/compiler2"), file("bin/compiler3"))
		println("Result: " + (good ? "identical" : "different"))
		if (!good) throw new Exception()
	}
}

task java_sources(type: JavaExec, dependsOn: [compiler]) {
	doFirst {
		file("generated-java").deleteDir()
		file("generated-java/sjava/compiler").mkdirs()
		file("generated-java/sjava/sjava").mkdirs()
	}
	main = "-jar"
	args = [
		file("fernflower.jar"),
		"-nls=1",
		"-ind=    ",
		"-dgs=1",
		file("bin/main/"),
		file("generated-java/")
	]
}

task java_compile(type: JavaCompile, dependsOn: [diff]) {
	outputs.upToDateWhen { false }
	source = fileTree(dir: "generated-java", include: "**/*.java")
	destinationDir = file("generated-java")
	classpath = JARS
	sourceCompatibility = "1.8"
	targetCompatibility = "1.8"
	doLast {
		file("bin/compilerJava").deleteDir()
		SJavaCompile.compile(
			project,
			files(),
			fileTree("compiler") + STD_LIB,
			file("bin/compilerJava"),
			files("generated-java") + project.ext.JARS
		)
		def works = same(file("bin/compiler2"), file("bin/compilerJava"))
		println("java version works: " + works)
		if (!works) throw new Exception()
	}
}

def buildTasks = []

file("examples").listFiles().each { f ->
	if(f.name.endsWith(".sjava")) {
		def root = f.name.substring(0, f.name.indexOf("."))
		buildTasks += task "build_${root}"(type: SJavaCompile, dependsOn: [compiler]) {
			source = f
			destinationDir = file("bin")
		}
		task "run_${root}"(type: JavaExec, dependsOn: ["build_${root}"]) {
			main = "examples.${root}.Main"
			classpath = JARS + files("bin", "bin/main")
		}
	} else if (f.isDirectory()) {
		def root = f.name
		buildTasks += task "build_${root}"(type: SJavaCompile, dependsOn: [compiler]) {
			source = fileTree(f)
			destinationDir = file("bin")
		}
		task "run_${root}"(type: JavaExec, dependsOn: ["build_${root}"]) {
			main = "examples.${root}.Main"
			classpath = JARS + files("bin", "bin/main")
		}
	}
}

task tester(type: JavaExec, dependsOn: buildTasks) {
	main = "sjava.compiler.Tester"
	classpath = JARS + files("bin/main") + files("bin")
}
