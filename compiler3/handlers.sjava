(package sjava.compiler.handlers)

(import sjava.compiler.*)
(import sjava.compiler.mfilters.*)
(import sjava.compiler.emitters.*)
(import sjava.compiler.tokens.*)

(import java.util.*)
(import gnu.bytecode.*)

(define-class Handler () 'public
	((<init>) void (Object:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool false)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type null)
	((compile tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(this:compile null tok mi code needed)
	)
	((compileAll toks List{Token} i int e int mi AMethodInfo code CodeAttr needed Object) Type[] 'public
		(define l (toks:size))
		(define types (Type[] len: (- e i)))
		(define j i)
		(while (! (>= j e))
			(aset types (- j i)
				(this:compile (toks:get j) mi code
					(if (instance? needed Type[])
						(aget (as Type[] needed) (- j i))
						needed
					)
				)
			)
			(set j (+ j 1))
		)
		types
	)
	((tryHandlers h Handler default Type handlers List{Handler} tok Token mi AMethodInfo code CodeAttr needed Type) Type 'static
		(define i 0)
		(define type default)
		(define run true)
		(while (&& run (< i (handlers:size)))
			(define s (handlers:get i))
			(if (s:valid tok mi needed)
				(begin
					(set type (s:compile h tok mi code needed))
					(set run false)
				)
			)
			(set i (+ i 1))
		)
		type
	)
)

(define-class GenHandler (Handler) 'public
	(inst GenHandler 'static 'public)
	((<clinit>) void 'static (set GenHandler:inst (GenHandler)))
	(handlers List{Handler})
	((<init> handlers List{Handler}) void
		(Handler:<init>)
		(set this:handlers handlers)
	)
	((<init>) void
		(GenHandler:<init> (Arrays:asList (Object[]
			SHandler:inst
			CHandler:inst
			NHandler:inst
			ColonHandler:inst
			QuasiHandler:inst
			ConstsHandler:inst
			VHandler:inst
			IncludeHandler:inst
			ObjectHandler:inst
			MacroCallHandler:inst
			BlockHandler:inst
		)))
	)
	((compile tok Token mi AMethodInfo code CodeAttr needed Type) Type
		(define output (!= code null))
		(if output (code:putLineNumber (mi:ci:fs:name:substring (+ (mi:ci:fs:name:lastIndexOf "/") 1)) tok:line))
		(try
			(begin
				(define type (Handler:tryHandlers this Type:voidType this:handlers tok mi code needed))
				(Main:castMaybe code type needed)
			)
			e
			(begin
				(System:out:println ("Error compiling line ":concat (Integer:toString tok:line)))
				(throw e)
			)
		)
	)
)

(define-class MacroCallHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set MacroCallHandler:inst (MacroCallHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok MacroCallToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define tok MacroCallToken tok)
		(if (= tok:ret null)
			(begin
				(define name (as VToken (tok:toks:get 0)):val)
				(define o 4)
				(define l (- (tok:toks:size) 1))
				(define types (Type[] len:(+ o l) (Main:getCompilerType "AMethodInfo") (Type:getType "gnu.bytecode.Type") Type:intType (Main:getCompilerType "handlers.Handler")))
				(define j 0)
				(while (!= j l)
					(aset types (+ o j) (Main:getCompilerType "tokens.Token"))
					(set j (+ j 1))
				)
				(define method Method null)
				(define ci ClassInfo null)
				(define i 0)
				(while (= method null)
					(set ci ((mi:ci:fs:macroNames:get name):get i))
					(define filter (MFilter name types ci:c))
					(filter:searchDeclared)
					(set method (filter:getMethod))
					(set i (+ i 1))
				)
				(define params (method:getGenericParameterTypes))
				(define classes (Class[] len:(alen params)))
				(set j 0)
				(while (!= j (alen params))
					(aset classes j ((aget params j):getReflectClass))
					(set j (+ j 1))
				)
				(define args (ArrayList (Arrays:asList (Object[] mi needed (mi:scopes:size) h))))
				(args:addAll
					(if (&& (> (alen params) 0) (instance? (aget params (- (alen params) 1)) ArrayType))
						(begin
							(define var (- (alen params) o))
							(define al (ArrayList (tok:toks:subList 1 var)))
							(define out (Token[] len:(- (tok:toks:size) var)))
							((tok:toks:subList var (tok:toks:size)):toArray out)
							(al:add out)
							al
						)
						(tok:toks:subList 1 (tok:toks:size))
					)
				)
				(set tok:ret (as Token ((ci:rc:getMethod name classes):invoke null (args:toArray))))
			)
		)
		(mi:scopes:add (ArrayDeque))
		(define out (h:compile tok:ret mi code needed))
		(mi:scopes:remove (- (mi:scopes:size) 1))
		out
	)
)

(define-class IncludeHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set IncludeHandler:inst (IncludeHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok IncludeToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define tok IncludeToken tok)
		(if (= tok:ret null)
			(set tok:ret
				((mi:ci:fs:includes:rc:getMethod ((as IncludeToken tok):mi:method:getName) (Class[]
					(class AMethodInfo)
					(class gnu.bytecode.Type)
					Integer:TYPE
					(class Handler)
				)):invoke null (Object[] mi needed 0 h))
			)
		)
		(h:compile tok:ret mi code needed)
	)
)

(define-class SHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set SHandler:inst (SHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok SToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(if output (code:emitPushString (as SToken tok):val))
		Type:javalangStringType
	)
)

(define-class CHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set CHandler:inst (CHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok CToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define c int (as CToken tok):val)
		(if (! (instance? needed PrimType))
			(begin
				(if output (code:emitPushInt c))
				Type:charType
			)
			(begin
				(if output (code:emitPushConstant c needed))
				needed
			)
		)
	)
)

(define-class NHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set NHandler:inst (NHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok NToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define tok NToken tok)
		(if (instance? tok:val Double)
			(begin
				(if output (code:emitPushDouble (as Double tok:val)))
				Type:doubleType
			)
			(begin
				(if (! (instance? needed PrimType))
					(begin
						(if output (code:emitPushInt (as Integer tok:val)))
						Type:intType
					)
					(begin
						(if output (code:emitPushConstant (as Integer tok:val) needed))
						needed
					)
				)
			)
		)
	)
)

(define-class ColonHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ColonHandler:inst (ColonHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok ColonToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define t (mi:getType first))
		(if (= t null)
			(set t (h:compile first mi code Main:unknownType))
		)
		(define class ClassType (t:getRawType))
		(define field Field (class:getField (as VToken (tok:toks:get 1)):val -1))
		(if (field:getStaticFlag)
			(if output (code:emitGetStatic field))
			(if output (code:emitGetField field))
		)
		(define out (Main:resolveType t (field:getType)))
		(if (!= out Type:voidType)
			(if output (code:emitCheckcast (out:getRawType)))
		)
		out
	)
)

(define-class QuasiHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set QuasiHandler:inst (QuasiHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok QuoteToken)
	)
	((compileQuasi h Handler o Object mi AMethodInfo code CodeAttr needed Type) Type
		(define output (!= code null))
		(define result
			(if (= o null)
				(begin
					(if output (code:emitPushNull))
					Type:nullType
				)
			(if (instance? o Token)
				(begin
					(define tok Token o)
					(define t (if (instance? tok UnquoteToken) (h:compile (tok:toks:get 0) mi null Main:unknownType) null))
					(if (&&
							(instance? tok UnquoteToken)
							(||
								(= t (Main:getCompilerType "tokens.Token"))
								(&&
									(instance? t ArrayType)
									(= (as ArrayType t):elements (Main:getCompilerType "tokens.Token"))
								)
								((t:getRawType):isSubtype (Type:getType "java.util.List"))
							)
						)
						(h:compile (tok:toks:get 0) mi code Main:unknownType)
						(if (instance? tok UnquoteToken)
							(begin
								(define const (tok:toks:get 0))
								(define t (h:compile const mi null Main:unknownType))
								(define type ClassType
									(Main:getCompilerType
										(if (as UnquoteToken tok):s
											"tokens.SToken"
										(if (= t Type:charType)
											"tokens.CToken"
										(if (instance? t PrimType)
											"tokens.NToken"
											"tokens.VToken"
										)
										)
										)
									)
								)
								(if output (code:emitNew type))
								(if output (code:emitDup))
								(if output (code:emitInvoke (type:getDeclaredMethod "<init>" 0)))
								(if output (code:emitDup))
								(h:compile const mi code Type:objectType)
								(if output (code:emitPutField (type:getField "val")))
								(Main:getCompilerType "tokens.Token")
							)	
							(begin
								(define type ClassType (Type:getType ((o:getClass):getName)))
								(if output (code:emitNew type))
								(if output (code:emitDup))
								(if output (code:emitInvoke (type:getDeclaredMethod "<init>" 0)))
								(define superC type)
								(while (!= superC null)
									(define field (superC:getFields))
									(while (!= field null)
										(if (&&
												(!= (& (field:getModifiers) Access:PUBLIC) 0)
												(= (& (field:getModifiers) Access:TRANSIENT) 0)
											)
											(begin
												(if output (code:emitDup))
												(if (= (field:getType) Type:intType)
													(this:compileQuasi h ((field:getReflectField):getInt tok) mi code (field:getType))
													(this:compileQuasi h ((field:getReflectField):get tok) mi code (field:getType))
												)
												(if output (code:emitPutField field))
											)
										)
										(set field (field:getNext))
									)
									(set superC (superC:getSuperclass))
								)
								(if (= type (Main:getCompilerType "tokens.VToken"))
									(begin
										(if output (code:emitDup))
										(if output (code:emitLoad (code:getArg 2)))
										(if output (code:emitPutField (type:getField "macro")))
									)
								)
								(Main:getCompilerType "tokens.Token")
							)
						)
					)
				)
			(if (instance? o String)
				(begin
					(if output (code:emitPushString (as String o)))
					Type:javalangStringType
				)
			(if (instance? o Integer)
				(begin
					(if output (code:emitPushInt (as Integer o)))
					Type:intType
				)
			(if (instance? o Boolean)
				(begin
					(if output (code:emitPushInt (as int (as Boolean o))))
					Type:booleanType
				)
			(if (instance? o List)
				(begin
					(define o List o)
					(define al ClassType (Type:getType "java.util.ArrayList"))
					(if output (code:emitNew al))
					(if output (code:emitDup))
					(if output (code:emitInvoke (al:getMethod "<init>" (Type[]))))
					(define i 0)
					(while (!= i (o:size))
						(define t (this:compileQuasi h (o:get i) mi null Main:unknownType))
						(if (= t (Main:getCompilerType "tokens.Token"))
							(begin
								(if output (code:emitDup))
								(this:compileQuasi h (o:get i) mi code Main:unknownType)
								(if output (code:emitInvoke (al:getMethod "add" (Type[] Type:objectType))))
								(if output (code:emitPop 1))
							)
						(if (instance? t ArrayType)
							(begin
								(if output (code:emitDup))
								(this:compileQuasi h (o:get i) mi code Main:unknownType)
								(if output (code:emitInvoke ((as ClassType (Type:getType "java.util.Collections")):getDeclaredMethod "addAll" 2)))
								(if output (code:emitPop 1))
							)
							(begin
								(if output (code:emitDup))
								(this:compileQuasi h (o:get i) mi code Main:unknownType)
								(if output (code:emitInvoke ((as ClassType (Type:getType "java.util.List")):getDeclaredMethod "addAll" 1)))
								(if output (code:emitPop 1))
							)
						)
						)
						(set i (+ i 1))
					)
					al
				)
				(throw (Exception))
			)
			)
			)
			)
			)
			)
		)
		(Main:castMaybe code result needed)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define out (this:compileQuasi h (tok:toks:get 0) mi code (Main:getCompilerType "tokens.Token")))
		(if output (code:emitLoad (code:getArg 0)))
		(if output (code:emitInvoke ((as ClassType (Main:getCompilerType "Main")):getDeclaredMethod "transformBlock" 2)))
		out
	)
)

(define-class ConstsHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ConstsHandler:inst (ConstsHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(|| (tok:what:equals "true") (tok:what:equals "false") (tok:what:equals "null"))
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(if (tok:what:equals "true")
			(begin
				(if output (code:emitPushInt 1))
				Type:booleanType
			)
		(if (tok:what:equals "false")
			(begin
				(if output (code:emitPushInt 0))
				Type:booleanType
			)
			(begin
				(if output (code:emitPushNull))
				Type:nullType
			)
		)
		)
	)
)

(define-class VHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set VHandler:inst (VHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok VToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define found (mi:getVar (as VToken tok)))
		(found:load code)
	)
)

(define-class CaptureVHandler (Handler)
	(enc AMethodInfo)
	(captured Map{AVar Field})
	(n int)
	((<init> enc AMethodInfo) void
		(Handler:<init>)
		(set this:enc enc)
		(set this:captured (LinkedHashMap))
	)
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok VToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define found (mi:getVar (as VToken tok)))
		(if (= found null)
			(begin
				(define outer (this:enc:getVar (as VToken tok)))
				(if (= outer null) (throw (Exception)))
				(define field
					(if output
						(if (this:captured:containsKey outer)
							(this:captured:get outer)
							(begin
								(define new (mi:ci:c:addField ("captured$":concat (Integer:toString this:n)) outer:type Access:SYNTHETIC))
								(set this:n (+ this:n 1))
								(this:captured:put outer new)
								new
							)
						)
						null
					)
				)
				(if output (code:emitPushThis))
				(if output (code:emitGetField field))
				outer:type
			)
			(found:load code)
		)
	)
)

(define-class BeginBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set BeginBlockHandler:inst (BeginBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "begin")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first VToken (tok:toks:get 0))
		;(define newLevel (= first:macro (mi:scopes:size)))
		;(if (< (mi:scopes:size) first:macro)
		;	(throw (Exception))
		;)
		;(if newLevel (mi:scopes:add (ArrayDeque)))
		(mi:pushScope code (as BlockToken tok):labels)
		(h:compileAll tok:toks 1 (- (tok:toks:size) 1) mi code Type:voidType)
		(define type (h:compile (tok:toks:get (- (tok:toks:size) 1)) mi code needed))
		;(if newLevel (mi:scopes:remove (- (mi:scopes:size) 1)))
		(mi:popScope code)
		type
	)
)

(define-class LabelBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set LabelBlockHandler:inst (LabelBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "label")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define label (mi:getLabel (as VToken (tok:toks:get 1)):val))
		(if output (label:define code))
		Type:voidType
	)
)

(define-class GotoBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set GotoBlockHandler:inst (GotoBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "goto")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define label (mi:getLabel (as VToken (tok:toks:get 1)):val))
		(if output (code:emitGoto label))
		Type:voidType
	)
)

(define-class DefineBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set DefineBlockHandler:inst (DefineBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "define")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first VToken (tok:toks:get 0))
		(define type (mi:getType (tok:toks:get 2)))
		(if (= type null)
			(set type (h:compile (tok:toks:get 2) mi code Main:unknownType))
		(if (= (tok:toks:size) 4)
			(h:compile (tok:toks:get 3) mi code type)
			(if output (code:emitPushDefaultValue needed))
		)
		)
		(define var (mi:newVar code (as VToken (tok:toks:get 1)) type))
		(if output (code:emitStore var))
		Type:voidType
	)
)

(define-class TryBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set TryBlockHandler:inst (TryBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "try")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(if output (code:emitTryStart false null))
		(define type (h:compile (tok:toks:get 1) mi code needed))
		(define var (mi:newVar code (as VToken (tok:toks:get 2)) Type:javalangThrowableType))
		(if output (code:emitCatchStart var))
		(h:compile (tok:toks:get 3) mi code Main:unknownType)
		(if output (code:emitCatchEnd))
		(if output (code:emitTryCatchEnd))
		type
	)
)

(define-class InstanceBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set InstanceBlockHandler:inst (InstanceBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "instance?")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(h:compile (tok:toks:get 1) mi code Main:unknownType)
		(if output (code:emitInstanceof (mi:getType (tok:toks:get 2))))
		Type:booleanType
	)
)

(define-class SetBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set SetBlockHandler:inst (SetBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "set")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define out (tok:toks:get 1))
		(if (instance? out ColonToken)
			(begin
				(define first (out:toks:get 0))
				(define t (mi:getType first))
				(if (= t null)
					(set t (h:compile first mi code Main:unknownType))
				)
				(define class ClassType (t:getRawType))
				(define field Field (class:getField (as VToken (out:toks:get 1)):val -1))
				(h:compile (tok:toks:get 2) mi code (Main:resolveType t (field:getType)))
				(if (field:getStaticFlag)
					(if output (code:emitPutStatic field))
					(if output (code:emitPutField field))
				)
			)
			(begin
				(define var (mi:getVar (as VToken (tok:toks:get 1))))
				(h:compile (tok:toks:get 2) mi code var:type)
				(var:store code)
			)
		)
		Type:voidType
	)
)

(define-class ASetBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ASetBlockHandler:inst (ASetBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "aset")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define type ArrayType (h:compile (tok:toks:get 1) mi code Main:unknownType))
		(h:compile (tok:toks:get 2) mi code Main:unknownType)
		(h:compile (tok:toks:get 3) mi code type:elements)
		(if output (code:emitArrayStore))
		Type:voidType
	)
)

(define-class AGetBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set AGetBlockHandler:inst (AGetBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "aget")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define type ArrayType (h:compile (tok:toks:get 1) mi code Main:unknownType))
		(h:compile (tok:toks:get 2) mi code Type:intType)
		(if output (code:emitArrayLoad))
		type:elements
	)
)

(define-class ALenBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ALenBlockHandler:inst (ALenBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "alen")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(h:compile (tok:toks:get 1) mi code Main:unknownType)
		(if output (code:emitArrayLength))
		Type:intType
	)
)

(define-class AsBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set AsBlockHandler:inst (AsBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "as")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define cast (mi:getType (tok:toks:get 1)))
		(h:compile (tok:toks:get 2) mi code cast)
	)
)

(define-class BinOpsBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set BinOpsBlockHandler:inst (BinOpsBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(Main:binOps:containsKey first:val)
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first VToken (tok:toks:get 0))
		(define otype (Main:numericOpType (h:compileAll tok:toks 1 (tok:toks:size) mi null Main:unknownType)))
		(h:compile (tok:toks:get 1) mi code otype)
		(define i 2)
		(while (!= i (tok:toks:size))
			(h:compile (tok:toks:get i) mi code otype)
			(if output (code:emitBinop (Main:binOps:get first:val) otype))
			(set i (+ i 1))
		)
		otype
	)
)

(define-class IfBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set IfBlockHandler:inst (IfBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "if")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(Main:emitIf h false tok 1 (tok:toks:get 2) (if (= (tok:toks:size) 4) (tok:toks:get 3) null) mi code needed)
	)
)

(define-class WhileBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set WhileBlockHandler:inst (WhileBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "while")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(mi:pushScope code (as BlockToken tok):labels)
		(define start Label (Label))
		(if output (start:define code))
		(define t (Main:emitIf h false tok 1 (Emitters (Emitter[] (Emitters (tok:toks:subList 2 (tok:toks:size))) (Goto start))) null mi code needed))
		(mi:popScope code)
		t
	)
)

(define-class CompareBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set CompareBlockHandler:inst (CompareBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(Main:isCompare first:val)
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(Main:emitIf_ h false tok 1 (tok:toks:size) (as VToken first):val (Token tok:line -1 "true") (Token tok:line -1 "false") mi code Type:booleanType)
	)
)

(define-class ColonBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ColonBlockHandler:inst (ColonBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? (tok:toks:get 0) ColonToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define name (as VToken (first:toks:get 1)):val)
		(if (name:equals "<init>") (if output (code:emitPushThis)))
		(define special
			(&&
				(instance? (first:toks:get 0) VToken)
				((as VToken (first:toks:get 0)):val:equals "super")
			)
		)
		(define t
			(if special
				(begin
					(if output (code:emitPushThis))
					(mi:ci:c:getGenericSuperclass)
				)
				(mi:getType (first:toks:get 0))
			)
		)
		(if (= t null)
			(set t (h:compile (first:toks:get 0) mi code Main:unknownType))
		)
		(Main:emitInvoke h name t (Emitters (tok:toks:subList 1 (tok:toks:size))) mi code Main:unknownType special)
	)
)

(define-class DefaultBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set DefaultBlockHandler:inst (DefaultBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		true
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define first (tok:toks:get 0))
		(define type Type (mi:getType first))
		(if (= type null)
			(begin
				(define t (h:compile first mi code Main:unknownType))
				(define c ClassType (t:getRawType))
				(define method (c:getDeclaredMethods))
				(define i 0)
				(define tocall Method null)
				(while (!= method null)
					(if (&& (! ((method:getName):equals "<init>")) (= 0 (& Access:SYNTHETIC (method:getModifiers))))
						(if (= tocall null)
							(set tocall method)
							(throw (Exception))
						)
					)
					(set method (method:getNext))
				)
				(Main:emitInvoke h (tocall:getName) t (Emitters (tok:toks:subList 1 (tok:toks:size))) mi code Main:unknownType)
			)
			(if (instance? type ArrayType)
				(begin
					(define array ArrayType type)
					(define len Token (if (> (tok:toks:size) 1) (tok:toks:get 1) null))
					(define i0
						(if (&& (!= len null) (instance? len ColonToken) ((as VToken (len:toks:get 0)):val:equals "len"))
							(begin (h:compile (len:toks:get 1) mi code Main:unknownType) 2)
							(begin (if output (code:emitPushInt (- (tok:toks:size) 1))) 1)
						)
					)
					(if output (code:emitNewArray (array:elements:getRawType)))
					(define i i0)
					(while (!= i (tok:toks:size))
						(if output (code:emitDup))
						(if output (code:emitPushInt (- i i0)))
						(h:compile (tok:toks:get i) mi code array:elements)
						(if output (code:emitArrayStore))
						(set i (+ i 1))
					)
					type
				)
				(begin
					(define class ClassType (type:getRawType))
					(if output (code:emitNew class))
					(if output (code:emitDup))
					(Main:emitInvoke h "<init>" type (Emitters (tok:toks:subList 1 (tok:toks:size))) mi code Main:unknownType)
					type
				)
			)
		)
	)
)

(define-class ThrowBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ThrowBlockHandler:inst (ThrowBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "throw")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(h:compile (tok:toks:get 1) mi code Main:unknownType)
		(if output (code:emitThrow))
		Main:throwType
	)
)

(define-class ClassBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ClassBlockHandler:inst (ClassBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "class")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(if output (code:emitPushClass (as ObjectType (mi:getType (tok:toks:get 1)))))
		Type:javalangClassType
	)
)

(define-class SynchronizedBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set SynchronizedBlockHandler:inst (SynchronizedBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "synchronized")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(h:compile (tok:toks:get 1) mi code Main:unknownType)
		(mi:pushScope code (as BlockToken tok):labels)
		(if output (code:emitDup))
		(if output (code:emitMonitorEnter))
		(h:compileAll tok:toks 2 (- (tok:toks:size) 1) mi code Type:voidType)
		(define type (h:compile (tok:toks:get (- (tok:toks:size) 1)) mi code needed))
		(if output (code:emitMonitorExit))
		(mi:popScope code)
		type
	)
)

(define-class TypeBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set TypeBlockHandler:inst (TypeBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "type")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(if output (code:emitLoad (code:getArg 3)))
		(h:compile (tok:toks:get 1) mi code Main:unknownType)
		(if output (code:emitLoad (code:getArg 0)))
		(if output (code:emitInvoke ((Main:getCompilerType "Main"):getDeclaredMethod "transformBlock" 2)))
		(if output (code:emitLoad (code:getArg 0)))
		(if output (code:emitPushNull))
		(if output (code:emitGetStatic ((Main:getCompilerType "Main"):getField "unknownType")))
		(if output (code:emitInvoke ((Main:getCompilerType "handlers.Handler"):getDeclaredMethod "compile" 4)))
		(Type:getType "gnu.bytecode.Type")
	)
)

(define-class ReturnBlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ReturnBlockHandler:inst (ReturnBlockHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(if (instance? (tok:toks:get 0) VToken)
			(begin
				(define first VToken (tok:toks:get 0))
				(first:val:equals "return")
			)
			false
		)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(if (= (tok:toks:size) 2)
			(h:compile (tok:toks:get 1) mi code Main:unknownType)
		)
		(if output (code:emitReturn))
		Main:returnType
	)
)

(define-class ObjectHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set ObjectHandler:inst (ObjectHandler)))
	((<init>) void (Handler:<init>))
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(instance? tok ObjectToken)
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define output (!= code null))
		(define tok ObjectToken tok)
		(define lambda (instance? tok LambdaToken))
		(define ci tok:ci)
		(define superT (tok:toks:get 1))
		(define FunctionN (&& lambda (instance? superT BlockToken)))
		(define emitters
			(Emitters (if
				(|| lambda (! (instance? superT BlockToken)))
					(ArrayList)
					(superT:toks:subList 1 (superT:toks:size))
				)
			)
		)
		(if (= ci null)
			(begin
				(define handlers (ArrayList GenHandler:inst:handlers))
				(define captureH (CaptureVHandler mi))
				(handlers:set (handlers:indexOf VHandler:inst) captureH)
				(define h (GenHandler handlers))
				(if output
					(begin
						(set ci (ClassInfo ((mi:ci:c:getName):concat ("$":concat (Integer:toString mi:ci:anonymous))) mi:ci:fs))
						(set tok:ci ci)
						(mi:ci:fs:anonClasses:add ci)
						(set mi:ci:anonymous (+ mi:ci:anonymous 1))
					)
				)
				(if FunctionN
					(begin
						(define scope (HashMap))
						(define params (Main:getParams mi:ci superT scope 0 1))
						(define generics (Type[] len:(+ (alen params) 1)))
						(System:arraycopy params 0 generics 0 (alen params))
						(define block (BlockToken tok:line (tok:toks:subList 2 (tok:toks:size))))
						(define fakemi (MethodInfo (ClassInfo null mi:ci:fs) block null scope))
						(h:compileAll block:toks 0 (- (block:toks:size) 1) fakemi null Type:voidType)
						(define ret (Main:tryBox (h:compile (block:toks:get (- (block:toks:size) 1)) fakemi null Main:unknownType)))
						(aset generics (alen params) ret)
						(define t (ParameterizedType (ClassType:make ("sjava.std.Function":concat (Integer:toString (alen params)))) generics))
						(set tok:t t)
						(if output
							(begin
								(define m (ci:c:addMethod "apply" params ret Access:PUBLIC))
								(ci:c:addInterface t)
								(define mi (MethodInfo ci block m scope))
								(mi:compileMethodBody h)
							)
						)
					)
				(if lambda
					(begin
						(define t (mi:getType superT))
						(set tok:t t)
						(if output
							(begin
								(define sam ((as ClassType (t:getRawType)):checkSingleAbstractMethod))
								(define scope (HashMap))
								(define args (tok:toks:get 2))
								(define i 0)
								(define params (Type[] len:(args:toks:size)))
								(while (!= i (args:toks:size))
									(define arg VToken (args:toks:get i))
									(define param (Main:resolveType t (aget (sam:getGenericParameterTypes) i)))
									(scope:put arg:val (Arg (+ i 1) param))
									(aset params i param)
									(set i (+ i 1))
								)
								(ci:c:addInterface t)
								(define m (ci:c:addMethod (sam:getName) params (Main:resolveType t (sam:getReturnType)) Access:PUBLIC))
								(define block (BlockToken tok:line (tok:toks:subList 3 (tok:toks:size))))
								(define mi (MethodInfo ci block m scope))
								(mi:compileMethodBody h)
							)
						)
					)
					(begin
						(define t
							(if (instance? superT BlockToken)
								(mi:getType (superT:toks:get 0))
								(mi:getType superT)
							)
						)
						(set tok:t t)
						(if output
							(begin
								(if ((as ClassType (t:getRawType)):isInterface)
									(ci:c:addInterface t)
									(ci:c:setSuper t)
								)
								(define i 2)
								(while (!= i (tok:toks:size))
									(ci:compileDef (tok:toks:get i))
									(set i (+ i 1))
								)
								(set i 0)
								(while (!= i (ci:methods:size))
									(define mi (ci:methods:get i))
									(mi:compileMethodBody h)
									(set i (+ i 1))
								)
							)
						)
					)
				)
				)
				(if output
					(begin
						(define superC (ci:c:getSuperclass))
						(define types (emitters:emitAll h mi null Main:unknownType))
						(define filter (MFilter "<init>" types superC))
						(filter:searchDeclared)
						(define superCons (filter:getMethod))
						(set tok:captured (AVar[] len:(captureH:captured:size)))
						((captureH:captured:keySet):toArray tok:captured)
						(define fields (Field[] len:(captureH:captured:size)))
						((captureH:captured:values):toArray fields)
						(define n (alen (superCons:getGenericParameterTypes)))
						(define params (Type[] len:(+ n (alen fields))))
						(System:arraycopy (superCons:getGenericParameterTypes) 0 params 0 n)
						(define i 0)
						(while (!= i (alen fields))
							(aset params (+ n i) ((aget fields i):getType))
							(set i (+ i 1))
						)
						(define cons (ci:c:addMethod "<init>" params Type:voidType 0))
						(define code (cons:startCode))
						(code:emitLoad (code:getArg 0))
						(set i 0)
						(while (!= i n)
							(code:emitLoad (code:getArg (+ i 1)))
							(set i (+ i 1))
						)
						(code:emitInvoke superCons)
						(set i 0)
						(while (!= i (alen fields))
							(code:emitPushThis)
							(code:emitLoad (code:getArg (+ n i 1)))
							(code:emitPutField (aget fields i))
							(set i (+ i 1))
						)
						(code:emitReturn)
					)
				)
			)
		)
		(if output (code:emitNew ci:c))
		(if output (code:emitDup))
		(if output
			(begin
				(define i 0)
				(while (!= i (alen tok:captured))
					(emitters:emitters:add (LoadAVar (aget tok:captured i)))
					(set i (+ i 1))
				)
				(Main:emitInvoke h "<init>" ci:c emitters mi code Main:unknownType)
			)
		)
		tok:t
	)
)

(define-class BlockHandler (Handler)
	(inst Handler 'static)
	((<clinit>) void 'static (set BlockHandler:inst (BlockHandler)))
	(handlers List{Handler})
	((<init> handlers List{Handler}) void
		(Handler:<init>)
		(set this:handlers handlers)
	)
	((<init>) void
		(BlockHandler:<init> (Arrays:asList (Object[]
			BeginBlockHandler:inst
			LabelBlockHandler:inst
			GotoBlockHandler:inst
			DefineBlockHandler:inst
			TryBlockHandler:inst
			InstanceBlockHandler:inst
			SetBlockHandler:inst
			ASetBlockHandler:inst
			AGetBlockHandler:inst
			ALenBlockHandler:inst
			AsBlockHandler:inst
			BinOpsBlockHandler:inst
			IfBlockHandler:inst
			WhileBlockHandler:inst
			CompareBlockHandler:inst
			ColonBlockHandler:inst
			ThrowBlockHandler:inst
			ClassBlockHandler:inst
			SynchronizedBlockHandler:inst
			TypeBlockHandler:inst
			ReturnBlockHandler:inst
			DefaultBlockHandler:inst
		)))
	)
	((valid tok Token mi AMethodInfo needed Type) bool 'public
		(&& (instance? tok BlockToken) (> (tok:toks:size) 0))
	)
	((compile h Handler tok Token mi AMethodInfo code CodeAttr needed Type) Type 'public
		(define type (Handler:tryHandlers h null this:handlers tok mi code needed))
		type
	)
)
