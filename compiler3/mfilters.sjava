(package sjava.compiler.mfilters)

(import sjava.compiler.*)

(import java.util.*)
(import gnu.bytecode.*)

(define-class MethodCall () 'public
	(m Method 'public)
	(t Type 'public)
	(tvs Map{TypeVariable Type} 'public)
	((<init> m Method t Type tvs Map{TypeVariable Type}) void
		(super:<init>)
		(set this:m m)
		(set this:t t)
		(set this:tvs tvs)
	)
)

(define-class AFilter () 'public 'abstract
	(pt Type)
	((<init> pt Type) void
		(super:<init>)
		(set this:pt pt)
	)
	((select method Method generic Type) void 'abstract)
	((search t Type) void
		(define m ((as ClassType (t:getRawType)):getDeclaredMethods))
		(while (!= m null)
			(this:select m t)
			(set m (m:getNext))
		)
	)
	((searchAll) void 'public
		(if (instance? this:pt ArrayType)
			(this:searchArray)
			(begin
				(define t this:pt)
				(define supers (ArrayList{Type}))
				(while (!= t null)
					(this:search t)
					(supers:add t)
					(set t (Main:resolveType t ((as ClassType (t:getRawType)):getGenericSuperclass)))
				)
				(define i 0)
				(while (!= i (supers:size))
					(define superC (supers:get i))
					(this:searchIntfs superC ((as ClassType (superC:getRawType)):getGenericInterfaces))
					(set i (+ i 1))
				)
			)
		)
	)
	((searchIntfs sub Type intfs Type[]) void
		(define j 0)
		(if (!= intfs null)
			(while (!= j (alen intfs))
				(define gintf (Main:resolveType sub (aget intfs j)))
				(this:search gintf)
				(this:searchIntfs gintf ((as ClassType (gintf:getRawType)):getGenericInterfaces))
				(set j (+ j 1))
			)
		)
	)
	((searchDeclared) void 'public
		(this:search this:pt)
	)
	((searchArray) void
		(this:search Type:objectType)
	)
)

(define-class BridgeFilter (AFilter) 'public
	(m Method)
	((<init> m Method) void 'public
		(super:<init> (m:getDeclaringClass))
		(set this:m m)
	)
	((select method Method generic Type) void
		(define p1 (this:m:getGenericParameterTypes))
		(define p2 (method:getGenericParameterTypes))
		(define r1 (this:m:getReturnType))
		(define r2 (method:getReturnType))
		(if
			(&&
				((method:getName):equals (this:m:getName))
				(= (alen p1) (alen p2))
				(! (Type:isSame generic this:pt))
			)
			(begin
				(define n (alen p1))
				(define i 0)
				(define diff (! (Type:isSame (r1:getRawType) (r2:getRawType))))
				(define overrides true)
				(while (&& overrides (!= i n))
					(if
						(&&
							(! diff)
							(! (Type:isSame ((aget p1 i):getRawType) ((aget p2 i):getRawType)))
						)
						(set diff true)
					)
					(set overrides (Type:isSame (Main:resolveType generic (aget p1 i)) (Main:resolveType generic (aget p2 i))))
					(set i (+ i 1))
				)
				(if (&& diff overrides)
					(Main:generateBridgeMethod this:m p2 r2)
				)
			)
		)
	)
)

(define-class MFilter (AFilter) 'public
	(methods0 ArrayList{MethodCall})
	(methods1 ArrayList{MethodCall})
	(varmethods ArrayList{MethodCall})
	(name String)
	(types Type[])
	((<init> name String types Type[] pt Type) void 'public
		(super:<init> pt)
		(set this:methods0 (ArrayList))
		(set this:methods1 (ArrayList))
		(set this:varmethods (ArrayList))
		(set this:name name)
		(set this:types types)
	)
	((select method Method generic Type) void
		(define c (method:getDeclaringClass))
		(if
			(&&
				((method:getName):equals this:name)
				(||
					(! (c:isInterface))
					((as ClassType (generic:getRawType)):isInterface)
					(! (method:isAbstract))
				)
				(= 0 (& (method:getModifiers) Access:SYNTHETIC))
			)
			(begin
				(define varargs (!= (& (method:getModifiers) Access:TRANSIENT) 0))
				(define na (alen this:types))
				(define params (method:getGenericParameterTypes))
				(define np (alen params))
				(if (|| (= na np) (&& varargs (>= na (- np 1))))
					(begin
						(define arrayNeeded
							(&&
								varargs
								(||
									(= na (- np 1))
									(!= (Main:arrayDim (aget params (- np 1))) (Main:arrayDim (aget this:types (- np 1))))
								)
							)
						)
						(define reals
							(if arrayNeeded
								(begin
									(define types (Type[] len:np))
									(define default (= na (- np 1)))
									(System:arraycopy this:types 0 types 0 (- np 1))
									(aset types (- np 1)
										(if default
											(aget params (- np 1))
											(ArrayType (aget this:types (- np 1))) ;can be more specific
										)
									)
									types
								)
								this:types
							)
						)
						(define tvs (Main:unresolveTvs (method:getTypeParameters) params reals))
						(define stop false)
						(define maxLevel 0)
						(define i 0)
						(while (! (|| stop (= i (alen this:types))))
							(define at
								(Main:resolveType tvs generic
									(if
										(&&
											arrayNeeded
											(>= i (- np 1))
										)
										(as ArrayType (aget params (- np 1))):elements
										(aget params i)
									)
								)
							)
							(define level (at:compare (aget this:types i)))
							(if (> level maxLevel)
								(set maxLevel level)
							)
							(if (< level 0)
								(set stop true)
							)
							(set i (+ i 1))
						)
						(define mc (MethodCall method generic tvs))
						(if (! stop)
							(if varargs
								(this:varmethods:add mc)
								(if (= maxLevel 0)
									(this:methods0:add mc)
									(this:methods1:add mc)
								)
							)
						)
					)
				)
			)
		)
	)
	((getMethodCall) MethodCall 'public
		(if (= (this:methods0:size) 0)
			(if (= (this:methods1:size) 0)
				(if (= (this:varmethods:size) 0)
					null
					(this:varmethods:get 0)
				)
				(this:methods1:get 0)
			)
			(this:methods0:get 0)
		)
	)
	((getMethod) Method 'public
		(define mc (this:getMethodCall))
		(if (= mc null)
			null
			mc:m
		)
	)
)
