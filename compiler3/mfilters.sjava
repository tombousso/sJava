(package sjava.compiler.mfilters)

(import sjava.compiler.*)

(import java.util.*)
(import gnu.bytecode.*)

(define-class MethodCall () 'public
	(m Method 'public)
	(t Type 'public)
	(tvs Map{TypeVariable Type} 'public)
	(types Type[] 'public)
	((<init> m Method t Type tvs Map{TypeVariable Type} types Type[]) void
		(super:<init>)
		(set this:m m)
		(set this:t t)
		(set this:tvs tvs)
		(set this:types types)
	)
	((moreSpecific o MethodCall) bool
		(define as (this:m:getGenericParameterTypes))
		(define bs (o:m:getGenericParameterTypes))
		(define n (Math:min (alen as) (alen bs)))
		(define good false)
		(for ((i 0)) (< i n) (inc i)
			(define a (Main:resolveType this:tvs this:t (aget as i)))
			(define b (Main:resolveType o:tvs o:t (aget bs i)))
			(define comp (Main:compare b a))
			(if (= comp 1)
				(set good true)
				(if (< comp 0)
					(return false)
				)
			)
		)
		(if (&& (! good) (< (alen bs) (alen as)))
			false
			true
		)
	)
	((mostSpecific methods List{MethodCall}) bool
		(forEach method methods
			(if (! (this:moreSpecific method))
				(return false)
			)
		)
		true
	)
	((toString) String 'public
		(this:m:toString)
	)
)

(define-class AFilter () 'public 'abstract
	(pt Type)
	(foundSigs HashSet{String})
	((<init> pt Type) void
		(super:<init>)
		(set this:pt pt)
		(set this:foundSigs (HashSet))
	)
	((select method Method generic Type) void 'abstract)
	((search t Type) void
		(define m ((as ClassType (t:getRawType)):getDeclaredMethods))
		(while (!= m null)
			(define msig (concat (m:getName) (m:getSignature)))
			(if (! (this:foundSigs:contains msig))
				(begin
					(this:foundSigs:add msig)
					(this:select m t)
				)
			)
			(set m (m:getNext))
		)
	)
	((searchAll) void 'public
		(if (instance? this:pt ArrayType)
			(this:searchArray)
			(forEach t (Main:superTypes this:pt)
				(this:search t)
			)
		)
	)
	((searchDeclared) void 'public
		(this:search this:pt)
	)
	((searchArray) void
		(this:search Type:objectType)
	)
)

(define-class BridgeFilter (AFilter) 'public
	(m Method)
	((<init> m Method) void 'public
		(super:<init> (m:getDeclaringClass))
		(set this:m m)
	)
	((select method Method generic Type) void
		(define p1 (this:m:getGenericParameterTypes))
		(define p2 (method:getGenericParameterTypes))
		(define r1 (this:m:getReturnType))
		(define r2 (method:getReturnType))
		(if
			(&&
				((method:getName):equals (this:m:getName))
				(= (alen p1) (alen p2))
				(! (Type:isSame generic this:pt))
			)
			(begin
				(define n (alen p1))
				(define diff (! (Type:isSame (r1:getRawType) (r2:getRawType))))
				(define overrides true)
				(for ((i 0)) (&& overrides (!= i n)) (inc i)
					(if
						(&&
							(! diff)
							(! (Type:isSame ((aget p1 i):getRawType) ((aget p2 i):getRawType)))
						)
						(set diff true)
					)
					(set overrides (Type:isSame (Main:resolveType generic (aget p1 i)) (Main:resolveType generic (aget p2 i))))
				)
				(if (&& diff overrides)
					(Main:generateBridgeMethod this:m p2 r2)
				)
			)
		)
	)
)

(define-class MFilter (AFilter) 'public
	(methods ArrayList{MethodCall})
	(name String)
	(types Type[])
	((<init> name String types Type[] pt Type) void 'public
		(super:<init> pt)
		(set this:methods (ArrayList))
		(set this:name name)
		(set this:types types)
	)
	((select method Method generic Type) void
		(define c (method:getDeclaringClass))
		(if
			(&&
				((method:getName):equals this:name)
				(||
					(! (c:isInterface))
					((as ClassType (generic:getRawType)):isInterface)
					(! (method:isAbstract))
				)
				(= 0 (& (method:getModifiers) Access:SYNTHETIC))
			)
			(begin
				(define mc (MFilter:isCompatible method generic this:types))
				(if (!= mc null)
					(this:methods:add mc)
				)
			)
		)
	)
	((getMethodCall) MethodCall 'public
		(forEach method this:methods
			(if (method:mostSpecific this:methods)
				(return method)
			)
		)
		null
	)
	((getMethod) Method 'public
		(define mc (this:getMethodCall))
		(if (= mc null)
			null
			mc:m
		)
	)
	((isCompatible method Method generic Type types Type[]) MethodCall 'public 'static
		(define varargs (!= (& (method:getModifiers) Access:TRANSIENT) 0))
		(define na (alen types))
		(define params (method:getGenericParameterTypes))
		(define np (alen params))
		(if (|| (= na np) (&& varargs (>= na (- np 1))))
			(begin
				(define arrayNeeded
					(&&
						varargs
						(||
							(= na (- np 1))
							(!= (Main:arrayDim (aget params (- np 1))) (Main:arrayDim (aget types (- np 1))))
						)
					)
				)
				(define reals
					(if arrayNeeded
						(begin
							(define ntypes (Type[] len:np))
							(define default (= na (- np 1)))
							(System:arraycopy types 0 ntypes 0 (- np 1))
							(aset ntypes (- np 1)
								(if default
									(aget params (- np 1))
									(ArrayType (aget types (- np 1))) ;can be more specific
								)
							)
							ntypes
						)
						types
					)
				)
				(define tparams
					(if ((method:getName):equals "<init>")
						(begin
							(define ctparams ((as ClassType (generic:getRawType)):getTypeParameters))
							(define mtparams (method:getTypeParameters))
							(cond
								((= ctparams null)
									mtparams
								)
								((= mtparams null)
									ctparams
								)
								(true
									(define o (TypeVariable[] len:(+ (alen ctparams) (alen mtparams))))
									(System:arraycopy ctparams 0 o 0 (alen ctparams))
									(System:arraycopy mtparams 0 o (alen ctparams) (alen mtparams))
									o
								)
							)
						)
						(method:getTypeParameters)
					)
				)
				(define tvs (Main:unresolveTvs tparams params reals))
				(define stop false)
				(for ((i 0)) (! (|| stop (= i (alen types)))) (inc i)
					(define at
						(Main:resolveType tvs generic
							(if
								(&&
									arrayNeeded
									(>= i (- np 1))
								)
								(as ArrayType (aget params (- np 1))):elements
								(aget params i)
							)
						)
					)
					(define level (Main:compare at (aget types i)))
					(if (|| (< level 0) (&& (= (aget types i) Type:nullType) (instance? at PrimType)))
						(set stop true)
					)
				)
				(if (! stop)
					(MethodCall method generic tvs types)
					null
				)
			)
			null
		)
	)
)
