(package sjava.compiler.tokens)

(import sjava.compiler.*)
(import sjava.compiler.emitters.*)
(import sjava.compiler.handlers.*)

(import java.util.*)
(import gnu.bytecode.*)

(define-class Token (Emitter) 'public
	(line int 'public)
	(prec int 'public)
	(what String 'public)
	(toks List{Token} 'public)
	(alwaysTransform bool 'public)
	(neverTransform bool 'public)
	(transformed bool 'public 'transient)
	((<init>) void 'public
		(super:<init>)
		(set this:prec 0)
		(set this:what "")
		(set this:alwaysTransform false)
		(set this:neverTransform false)
		(set this:transformed false)
	)
	((<init> line int) void
		(set this:line line)
		(this:<init>)
	)
	((<init> line int prec int) void
		(this:<init> line)
		(set this:prec prec)
	)
	((<init> line int prec int what String) void 'public
		(this:<init> line prec)
		(set this:what what)
	)
	((<init> line int toks List{Token}) void 'public
		(this:<init> line)
		(set this:toks toks)
	)
	((toksString) String
		(define s (StringBuffer))
		(forEachI tok this:toks i
			(s:append tok)
			(if (!= i (- (this:toks:size) 1))
				(s:append " ")
			)
		)
		(s:toString)
	)
	((toString) String 'public
		this:what
	)
	((emit h Handler mi AMethodInfo code CodeAttr needed Type) Type 'public
		(h:compile this mi code needed)
	)
)

(define-class SToken (Token) 'public
	(val String 'public)
	((<init> line int val String) void 'public
		(super:<init> line)
		(set this:val val)
	)
	((toString) String 'public
		(concat "\"" (org.apache.commons.lang3.StringEscapeUtils:escapeJava this:val) "\"")
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class NToken (Token) 'public
	(val Number 'public)
	((<init> line int sval String) void 'public
		(super:<init> line)
		(if (org.apache.commons.lang3.math.NumberUtils:isNumber sval)
			(set this:val (org.apache.commons.lang3.math.NumberUtils:createNumber sval))
		)
	)
	((toString) String 'public
		(this:val:toString)
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class CToken (Token) 'public
	(val Character 'public)
	((<init> line int val Character) void 'public
		(super:<init> line)
		(set this:val val)
	)
	((toString) String 'public
		(define c (this:val:toString))
		(forEach entry (Main:specialChars:entrySet)
			(if (this:val:equals (entry:getValue))
				(set c (entry:getKey))
			)
		)
		(concat "#\\" c)
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class VToken (Token) 'public
	(val String 'public)
	(macro int 'public 'transient)
	((<init> line int val String macro int) void
		(super:<init> line)
		(set this:val val)
		(set this:macro macro)
	)
	((<init> line int val String) void 'public
		(this:<init> line val 0)
	)
	((toString) String 'public
		this:val
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class BlockToken (Token) 'public
	(labels HashMap 'public)
	((<init> line int toks List{Token}) void 'public
		(super:<init> line toks)
	)
	((toString) String 'public
		(concat "(" (this:toksString) ")")
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class GenericToken (Token) 'public
	(tok Token 'public)
	((<init> line int tok Token toks List{Token}) void 'public
		(super:<init> line toks)
		(set this:tok tok)
	)
	((toString) String 'public
		(concat this:tok "{" (this:toksString) "}")
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class ColonToken (Token) 'public
	((<init> line int toks List{Token}) void 'public
		(super:<init> line toks)
	)
	((toString) String 'public
		(concat (this:toks:get 0) ":" (this:toks:get 1))
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class SingleQuoteToken (Token) 'public
	((<init> line int toks List{Token}) void 'public
		(super:<init> line toks)
		(set this:neverTransform true)
	)
	((toString) String 'public
		(concat "'" (this:toks:get 0))
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class QuoteToken (Token) 'public
	((<init> line int toks List{Token}) void 'public
		(super:<init> line toks)
		(set this:neverTransform true)
	)
	((toString) String 'public
		(concat "`" (this:toks:get 0))
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class UnquoteToken (Token) 'public
	(s bool 'public)
	((<init> line int toks List{Token} s bool) void 'public
		(super:<init> line toks)
		(set this:s s)
		(set this:alwaysTransform true)
	)
	((toString) String 'public
		(concat (if this:s ",$" ",") ((this:toks:get 0):toString))
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class IncludeToken (Token) 'public
	(mi MethodInfo 'public)
	(ret Token 'public)
	((<init> line int mi MethodInfo) void 'public
		(super:<init> line)
		(set this:mi mi)
	)
)

(define-class ObjectToken (Token) 'public
	(ci ClassInfo 'public)
	(captured AVar[] 'public)
	(t Type 'public)
	(params Type[])
	((<init> line int toks List{Token}) void 'public
		(super:<init> line toks)
	)
)

(define-class LambdaToken (ObjectToken) 'public
	((<init> line int toks List{Token}) void 'public
		(super:<init> line toks)
	)
)

(define-class MacroCallToken (Token) 'public
	(ret Token 'public)
	((<init> line int toks List{Token}) void 'public
		(super:<init> line toks)
	)
)
