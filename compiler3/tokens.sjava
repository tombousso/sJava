(package sjava.compiler.tokens)

(import sjava.compiler.*)
(import sjava.compiler.emitters.*)
(import sjava.compiler.handlers.*)

(import java.util.*)
(import gnu.bytecode.*)

(define-class Token (Emitter) 'public
	(line int 'public)
	((<init> line int) void
		(this:<init>)
		(set this:line line)
	)
	((emit h GenHandler mi AMethodInfo code CodeAttr needed Type) Type 'public
		(h:compile this mi code needed)
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class LexedParsedToken (Token) 'public
	(toks List{LexedParsedToken} 'public)
	(endLine int 'public)
	(transformed Token 'public 'transient)
	((<init> line int) void 'public
		(super:<init> line)
	)
	((<init> line int toks List{LexedParsedToken}) void 'public
		(super:<init> line)
		(set this:toks toks)
	)
	((toksString l List{LexedParsedToken}) String
		(define s (StringBuffer))
		(forEachI tok l i
			(s:append tok)
			(if (!= i (- (l:size) 1))
				(s:append " ")
			)
		)
		(s:toString)
	)
	((toksString) String
		(this:toksString this:toks)
	)
	((firstLine) int 'public
		this:line
	)
	((lastLine) int 'public
		this:endLine
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class ParsedToken (LexedParsedToken) 'public
	((<init> line int) void 'public
		(super:<init> line)
	)
	((<init> line int toks List{LexedParsedToken}) void 'public
		(super:<init> line toks)
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class LexedToken (LexedParsedToken) 'public
	(prec int 'public)
	(what String 'public)
	((<init> line int) void 'public
		(super:<init> line)
		(set this:what "")
	)
	((<init> line int prec int what String) void 'public
		(this:<init> line)
		(set this:prec prec)
		(set this:what what)
	)
	((toString) String 'public
		this:what
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class CommentToken (LexedToken) 'public
	(val String 'public)
	((<init> line int val String) void 'public
		(super:<init> line)
		(set this:val val)
	)
)

(define-class ConstToken (LexedToken) 'public
	(val String 'public)
	((<init> line int val String) void 'public
		(super:<init> line)
		(set this:val val)
	)
	((toString) String 'public
		this:val
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class SToken (LexedToken) 'public
	(val String 'public)
	(tripleQuote bool 'public)
	((<init> line int val String tripleQuote bool) void 'public
		(super:<init> line)
		(set this:val val)
		(set this:tripleQuote tripleQuote)
	)
	((toString) String 'public
		(if this:tripleQuote
			(begin
				(define escaped this:val)
				(if (escaped:endsWith "\"")
					(set escaped (concat (escaped:substring 0 (- (escaped:length) 1)) "\\\""))
					(if (escaped:endsWith "\\")
						(set escaped (concat (escaped:substring 0 (- (escaped:length) 1)) "\\\\"))
					)
				)
				(set escaped (escaped:replace "\"\"\"" "\\\"\"\""))
				(concat "\"\"\"" escaped "\"\"\"")
			)
			(concat "\"" (org.apache.commons.lang3.StringEscapeUtils:escapeJava this:val) "\"")
		)
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class NToken (LexedToken) 'public
	(val Number 'public)
	(sval String 'public)
	((<init> line int sval String) void 'public
		(super:<init> line)
		(set this:sval sval)
		(if (&& (sval:contains ".") (! (Character:isLetter (sval:charAt (- (sval:length) 1)))))
			(set sval (concat sval "d"))
		)
		(set this:val (org.apache.commons.lang3.math.NumberUtils:createNumber sval))
	)
	((toString) String 'public
		this:sval
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class CToken (LexedToken) 'public
	(val Character 'public)
	((<init> line int val Character) void 'public
		(super:<init> line)
		(set this:val val)
	)
	((toString) String 'public
		(define c (this:val:toString))
		(forEach entry (Main:specialChars:entrySet)
			(if (this:val:equals (entry:getValue))
				(set c (entry:getKey))
			)
		)
		(concat "#\\" c)
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class VToken (LexedToken) 'public
	(val String 'public)
	(macro int 'public 'transient)
	((<init> line int val String macro int) void
		(super:<init> line)
		(set this:val val)
		(set this:macro macro)
	)
	((<init> line int val String) void 'public
		(this:<init> line val 0)
	)
	((toString) String 'public
		this:val
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class BlockToken (ParsedToken) 'public
	((<init> line int toks List{LexedParsedToken}) void 'public
		(super:<init> line toks)
	)
	((toString) String 'public
		(concat "(" (this:toksString) ")")
	)
	((firstLine) int 'public
		(if (= (this:toks:size) 0)
			this:line
			((this:toks:get 0):firstLine)
		)
	)
	((lastLine) int 'public
		(if (= (this:toks:size) 0)
			this:line
			((this:toks:get (- (this:toks:size) 1)):lastLine)
		)
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class BlockToken2 (Token) 'public
	(labels HashMap 'public)
	(toks List{Token} 'public)
	((<init> line int toks List{Token}) void 'public
		(super:<init> line)
		(set this:toks toks)
		(set this:labels (HashMap))
	)
)

(define-class GenericToken (ParsedToken) 'public
	((<init> line int toks List{LexedParsedToken}) void 'public
		(super:<init> line toks)
	)
	((toString) String 'public
		(concat (this:toks:get 0) "{" (this:toksString (this:toks:subList 1 (this:toks:size))) "}")
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class ArrayToken (ParsedToken) 'public
	((<init> line int toks List{LexedParsedToken}) void 'public
		(super:<init> line toks)
	)
	((toString) String 'public
		(concat (this:toks:get 0) "[" (this:toksString (this:toks:subList 1 (this:toks:size))) "]")
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class ColonToken (ParsedToken) 'public
	((<init> line int toks List{LexedParsedToken}) void 'public
		(super:<init> line toks)
	)
	((toString) String 'public
		(concat (this:toks:get 0) ":" (this:toks:get 1))
	)
	((firstLine) int 'public
		((this:toks:get 0):firstLine)
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class FieldToken (Token) 'public
	(left Token 'public)
	(right String 'public)
	((<init> line int left Token right String) void 'public
		(super:<init> line)
		(set this:left left)
		(set this:right right)
	)
)

(define-class SingleQuoteToken (ParsedToken) 'public
	((<init> line int toks List{LexedParsedToken}) void 'public
		(super:<init> line toks)
	)
	((toString) String 'public
		(concat "'" (this:toks:get 0))
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class QuoteToken (ParsedToken) 'public
	((<init> line int toks List{LexedParsedToken}) void 'public
		(super:<init> line toks)
	)
	((toString) String 'public
		(concat "`" (this:toks:get 0))
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class QuoteToken2 (Token) 'public
	(tok Token 'public)
	((<init> line int tok Token) void 'public
		(super:<init> line)
		(set this:tok tok)
	)
)

(define-class UnquoteToken (ParsedToken) 'public
	(var bool 'public)
	((<init> line int toks List{LexedParsedToken} var bool) void 'public
		(super:<init> line toks)
		(set this:var var)
	)
	((toString) String 'public
		(concat (if this:var ",$" ",") (this:toks:get 0))
	)
	((<init>) void 'public
		(super:<init>)
	)
)

(define-class IncludeToken (Token) 'public
	(mi AMethodInfo 'public)
	(ret Token 'public)
	(toks List{LexedParsedToken} 'public)
	((<init> line int toks List{LexedParsedToken}) void 'public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class ObjectToken (Token) 'public
	(ci ClassInfo 'public)
	(captured AVar[] 'public)
	(t Type 'public)
	(params Type[])
	(toks List{LexedParsedToken} 'public)
	((<init> line int toks List{LexedParsedToken}) void 'public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class LambdaToken (ObjectToken) 'public
	((<init> line int toks List{LexedParsedToken}) void 'public
		(super:<init> line toks)
	)
)

(define-class MacroCallToken (Token) 'public
	(ret Token 'public)
	(name String 'public)
	(toks List{Token} 'public)
	((<init> line int name String toks List{Token}) void 'public
		(super:<init> line)
		(set this:name name)
		(set this:toks toks)
	)
)

(define-class BeginToken (BlockToken2) 'public
	((<init> line int toks List{Token}) void 'public
		(super:<init> line toks)
	)
)

(define-class LabelToken (Token) 'public
	(label String 'public)
	((<init> line int label String) void 'public
		(super:<init> line)
		(set this:label label)
	)
)

(define-class GotoToken (Token) 'public
	(label String 'public)
	((<init> line int label String) void 'public
		(super:<init> line)
		(set this:label label)
	)
)

(define-class DefineToken (Token) 'public
	(name VToken 'public)
	(type Type 'public)
	(tok Token 'public)
	((<init> line int name VToken type Type tok Token) void 'public
		(super:<init> line)
		(set this:name name)
		(set this:type type)
		(set this:tok tok)
	)
)

(define-class TryToken (Token) 'public
	(toks List{Token} 'public)
	((<init> line int toks List{Token}) void 'public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class InstanceToken (Token) 'public
	(tok Token 'public)
	(type Type 'public)
	((<init> line int tok Token type Type) void 'public
		(super:<init> line)
		(set this:tok tok)
		(set this:type type)
	)
)

(define-class SetToken (Token) 'public
	(toks List{Token} 'public)
	((<init> line int toks List{Token}) void 'public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class ASetToken (Token) 'public
	(toks List{Token} 'public)
	((<init> line int toks List{Token}) void 'public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class AGetToken (Token) 'public
	(toks List{Token} 'public)
	((<init> line int toks List{Token}) void 'public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class ALenToken (Token) 'public
	(tok Token 'public)
	((<init> line int tok Token) void 'public
		(super:<init> line)
		(set this:tok tok)
	)
)

(define-class AsToken (Token) 'public
	(type Type 'public)
	(tok Token 'public)
	((<init> line int type Type tok Token) void 'public
		(super:<init> line)
		(set this:type type)
		(set this:tok tok)
	)
)

(define-class NumOpToken (Token) 'public
	(op String 'public)
	(toks List{Token} 'public)
	((<init> line int op String toks List{Token}) void 'public
		(super:<init> line)
		(set this:op op)
		(set this:toks toks)
	)
)

(define-class ShiftToken (Token) 'public
	(right bool 'public)
	(tok Token 'public)
	(amt Token 'public)
	((<init> line int tok Token amt Token right bool) void 'public
		(super:<init> line)
		(set this:tok tok)
		(set this:amt amt)
		(set this:right right)
	)
)

(define-class IfToken (Token) 'public
	(toks List{Token} 'public)
	((<init> line int toks List{Token}) void 'public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class WhileToken (BlockToken2) 'public
	((<init> line int toks List{Token}) void 'public
		(super:<init> line toks)
	)
)

(define-class CompareToken (Token) 'public
	(compare String 'public)
	(toks List{Token} 'public)
	((<init> line int compare String toks List{Token}) void 'public
		(super:<init> line)
		(set this:compare compare)
		(set this:toks toks)
	)
)

(define-class ThrowToken (Token) 'public
	(tok Token 'public)
	((<init> line int tok Token) void 'public
		(super:<init> line)
		(set this:tok tok)
	)
)

(define-class ClassToken (Token) 'public
	(type Type 'public)
	((<init> line int type Type) void 'public
		(super:<init> line)
		(set this:type type)
	)
)

(define-class SynchronizedToken (BlockToken2) 'public
	((<init> line int toks List{Token}) void 'public
		(super:<init> line toks)
	)
)

(define-class TypeToken (Token) 'public
	(tok Token 'public)
	((<init> line int tok Token) void 'public
		(super:<init> line)
		(set this:tok tok)
	)
)

(define-class ReturnToken (Token) 'public
	(tok Token 'public)
	((<init> line int tok Token) void 'public
		(super:<init> line)
		(set this:tok tok)
	)
)

(define-class CallToken (Token) 'public
	(target Token 'public)
	(method String 'public)
	(toks List{Token} 'public)
	((<init> line int target Token method String toks List{Token}) void 'public
		(super:<init> line)
		(set this:target target)
		(set this:method method)
		(set this:toks toks)
	)
)

(define-class DefaultToken (Token) 'public
	(toks List{Token} 'public)
	((<init> line int toks List{Token}) void 'public
		(super:<init> line)
		(set this:toks toks)
	)
)

(define-class ConstructorToken (Token) 'public
	(type Type 'public)
	(toks List{Token} 'public)
	((<init> line int type Type toks List{Token}) void 'public
		(super:<init> line)
		(set this:type type)
		(set this:toks toks)
	)
)

(define-class ArrayConstructorToken (Token) 'public
	(type Type 'public)
	(len Token 'public)
	(toks List{Token} 'public)
	((<init> line int type Type len Token toks List{Token}) void 'public
		(super:<init> line)
		(set this:type type)
		(set this:len len)
		(set this:toks toks)
	)
)

(define-class EmptyToken (BlockToken2) 'public
	((<init> line int) void 'public
		(super:<init> line Collections:EMPTY_LIST)
	)
)
