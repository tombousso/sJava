(define-macro (inc v)
	`(set ,v (+ ,v 1))
)
(define-macro (forEachI item iterable index @block)
	(if (instance? (type iterable) gnu.bytecode.ArrayType)
		`(begin
			(define array ,iterable)
			(define ,index 0)
			(while (!= ,index (alen array))
				(define ,item (aget array ,index))
				,block
				(inc ,index)
			)
		)
		`(begin
			(define iterable ,iterable)
			(define it (iterable:iterator))
			(define ,index 0)
			(while (it:hasNext)
				(define ,item (it:next))
				,block
				(inc ,index)
			)
		)
	)
)
(define-macro (forEach item iterable @block)
	(macro forEachI item iterable `notused block)
)
(define-macro (print @objects)
	`(System:out:print (concat ,objects))
)
(define-macro (println @objects)
	`(System:out:println (concat ,objects))
)
