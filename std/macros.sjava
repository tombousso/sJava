(import gnu.bytecode.*)
(import %tokens%)

;(define-macro (while cond @block)
;	`(begin
;		(label start)
;		(if ,cond (begin ,block (goto start)))
;	)
;)
(define-macro (inc v n)
	`(set ,v (+ ,v ,n))
)
(define-macro (inc v)
	`(inc ,v 1)
)
(define-macro (dec v n)
	`(set ,v (- ,v ,n))
)
(define-macro (dec v)
	`(dec ,v 1)
)
(define-macro (forEachI item iterable index @block)
	(if (instance? (type iterable) ArrayType)
		`(begin
			(define array ,iterable)
			(define ,index 0)
			(while (!= ,index (alen array))
				(define ,item (aget array ,index))
				,block
				(inc ,index)
			)
		)
		`(begin
			(define iterable ,iterable)
			(define it (iterable:iterator))
			(define ,index 0)
			(while (it:hasNext)
				(define ,item (it:next))
				,block
				(inc ,index)
			)
		)
	)
)
(define-macro (forEach item iterable @block)
	`(forEachI ,item ,iterable notused ,block)
)
(define-macro (print @objects)
	`(System:out:print (concat ,objects))
)
(define-macro (println @objects)
	`(System:out:println (concat ,objects))
)
(define-macro (mapAI item iterable i @block)
	(define t ArrayType (type iterable))
	(define o (type `(begin (define ,item ,((t:getComponentType):getName)) (define ,i int) ,block)))
	`(begin
		(define iterable ,iterable)
		(define out (,((o:getName):concat "[]") len:(alen iterable)))
		(forEachI ,item iterable ,i (aset out ,i ,block))
		out
	)
)
(define-macro (mapA item iterable @block)
	`(mapAI ,item ,iterable i ,block)
)
(define-macro (concat @objects)
	(define appends
		(mapA o objects
			(if (instance? (type o) ArrayType)
				`(sb:append (java.util.Arrays:toString ,o))
				`(sb:append ,o)
			)
		)
	)
	`(begin
		(define sb (StringBuilder))
		,appends
		(sb:toString)
	)
)
(define-macro (lambdaWrap name @types)
	(define n (alen types))
	(define decl (Token[] len:(* n 2)))
	(define args (Token[] len:n))
	(define i 0)
	(while (!= i n)
		(define v `,(Character:toString (as char (+ 97 i))))
		(define t (aget types i))
		(aset decl (* i 2) v)
		(aset decl (+ (* i 2) 1) t)
		(aset args i v)
		(inc i)
	)
	`(lambda (,decl) (,name ,args))
)
(define-macro (for init test step @block)
	`(begin
		,init
		(while ,test
			,block
			,step
		)
	)
)
(define-macro (repeat n @block)
	`(for (define i ,n) (> i 0) (dec i) ,block)
)
(define-macro (cond @cases)
	(define out (aget cases (- (alen cases) 1)))
	(define n
		(if ((out:toks:get 0):what:equals "true")
			(begin
				(set out `(begin ,(out:toks:subList 1 (out:toks:size))))
				2
			)
			(begin
				(set out `())
				1
			)
		)	
	)
	(for (define i (- (alen cases) n)) (>= i 0) (dec i)
		(define case (aget cases i))
		(set out
			`(if ,(case:toks:get 0)
				(begin
					,(case:toks:subList 1 (case:toks:size))
				)
				,out
			)
		)
	)
	out
)