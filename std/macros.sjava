(import gnu.bytecode.*)
(import java.util.*)
(import %tokens%)

;(define-macro (while cond @block)
;	`(begin
;		(label start)
;		(if ,cond (begin ,block (goto start)))
;	)
;)
(define-macro (inc v n)
	`(set ,v (+ ,v ,n))
)
(define-macro (inc v)
	(macro inc v `1)
)
(define-macro (dec v n)
	`(set ,v (- ,v ,n))
)
(define-macro (dec v)
	(macro dec v `1)
)
(define-macro (forEachI item iterable index @block)
	(if (instance? (type iterable) ArrayType)
		`(begin
			(define array ,iterable)
			(define ,index 0)
			(while (!= ,index (alen array))
				(define ,item (aget array ,index))
				,block
				(inc ,index)
			)
		)
		`(begin
			(define iterable ,iterable)
			(define it (iterable:iterator))
			(define ,index 0)
			(while (it:hasNext)
				(define ,item (it:next))
				,block
				(inc ,index)
			)
		)
	)
)
(define-macro (forEach item iterable @block)
	`(forEachI ,item ,iterable notused ,block)
)
(define-macro (print @objects)
	`(System:out:print (concat ,objects))
)
(define-macro (println @objects)
	`(System:out:println (concat ,objects))
)
(define-macro (mapAI item collection i @block)
	(define t (type collection))
	(define itemT
		(if (instance? t ArrayType)
			(t:getComponentType)
			(type
				`(begin
					(define collection ,collection)
					((collection:iterator):next)
				)
			)
		)
	)
	(define len
		(if (instance? t ArrayType)
			`(alen collection)
			`(collection:size)
		)
	)
	(define arrElement `(begin (define ,item ,itemT) (define ,i int) ,block))
	(define o (type arrElement))
	`(begin
		(define collection ,collection)
		(define out ((unquote o)[] len:,len))
		(forEachI ,item collection ,i (aset out ,i (begin ,block)))
		out
	)
)
(define-macro (mapA item iterable @block)
	`(mapAI ,item ,iterable i ,block)
)
(define-macro (concat @objects)
	(define appends
		(mapA o objects
			(if (instance? (type o) ArrayType)
				`(sb:append (java.util.Arrays:toString ,o))
				`(sb:append ,o)
			)
		)
	)
	`(begin
		(define sb (StringBuilder))
		,appends
		(sb:toString)
	)
)
(define-macro (let inits @block)
	(define defines
		(mapA init inits:toks
			`(define ,init:toks)
		)
	)
	`(begin
		,defines
		,block
	)
)
(define-macro (lambdaWrap name @types)
	(define n (alen types))
	(define decl (Object[] len:(* n 2)))
	(define args (Object[] len:n))
	(define i 0)
	(while (!= i n)
		(define v `,$(Character:toString (as char (+ 97 i))))
		(define t (aget types i))
		(aset decl (* i 2) v)
		(aset decl (+ (* i 2) 1) t)
		(aset args i v)
		(inc i)
	)
	`(lambda (,decl) (,name ,args))
)
(define-macro (for inits test step @block)
	`(let ,inits
		(while ,test
			(begin
				,block
			)
			,step
		)
	)
)
(define-macro (repeat n @block)
	`(for ((i ,n)) (> i 0) (dec i) ,block)
)
(define-macro (cond @cases)
	(define out (aget cases (- (alen cases) 1)))
	(define n
		(if
			(&&
				(instance? (out:toks:get 0) ConstToken)
				((as ConstToken (out:toks:get 0)):val:equals "true")
			)
			(begin
				(set out `(begin ,(out:toks:subList 1 (out:toks:size))))
				2
			)
			(begin
				(set out `())
				1
			)
		)
	)
	(for ((i (- (alen cases) n))) (>= i 0) (dec i)
		(define case (aget cases i))
		(set out
			`(if ,(case:toks:get 0)
				(begin
					,(case:toks:subList 1 (case:toks:size))
				)
				,out
			)
		)
	)
	out
)
(define-macro (instanceCond var @cases)
	(define newCases
		(mapA case cases
			(if
				(&&
					(instance? (case:toks:get 0) ConstToken)
					((as ConstToken (case:toks:get 0)):val:equals "true")
				)
				case
				`((instance? ,var ,(case:toks:get 0))
					(define ,var ,(case:toks:get 0) ,var)
					,(case:toks:subList 1 (case:toks:size))
				)
			)
		)
	)
	`(cond
		,newCases
	)
)
(define-macro (doubleDispatch call arg)
	(define j 1)
	(define special 0)
	(while (&& (!= j (call:toks:size)) (= special 0))
		(define arg VToken (call:toks:get j))
		(if (arg:val:equals "_")
			(set special j)
		)
		(inc j)
	)
	(call:toks:set special arg)
	(define conds (ArrayList))
	(define mname (as VToken ((call:toks:get 0):toks:get 1)):val)
	(define nargs (alen (mi:method:getParameterTypes)))
	(forEach omi mi:ci:methods
		(if
			(&&
				((omi:method:getName):equals mname) (!= mi omi)
				(= nargs (alen (omi:method:getParameterTypes)))
			)
			(begin
				(define t (aget (omi:method:getParameterTypes) (- special 1)))
				(conds:add
					`((instance? ,arg ,t)
						,call
					)
				)
			)
		)
	)
	(define out
		`(cond
			,conds
			(true (throw (RuntimeException (concat "Double dispatch with " ,arg))))
		)
	)
	out
)
(define-macro (with obj @calls)
	`(begin
		(define obj ,obj)
		,(mapA call calls
			`(obj:,(call:toks:get 0) ,(call:toks:subList 1 (call:toks:size)))
		)
		obj
	)
)
(define-macro (chain obj @calls)
	(define out obj)
	(forEach call calls
		(set out `((unquote out):(unquote (call:toks:get 0)) ,(call:toks:subList 1 (call:toks:size))))
	)
	out
)
(define-method-macro (get @rest)
	(define s (as VToken (aget rest 0)):val)
	(define f (ci:c:getField s -1))
	(define tok `(this:,$s))
	(define scope (LinkedHashMap))
	(define tup (sjava.compiler.Main:extractModifiers (Arrays:asList rest) 1))
	(ci:addMethod (concat "get" (Character:toUpperCase (s:charAt 0)) (s:substring 1 (s:length))) (f:getType) tup:_1 tok:toks scope)
)
(define-method-macro (set @rest)
	(define s (as VToken (aget rest 0)):val)
	(define f (ci:c:getField s -1))
	(define tok `((set this:,$s ,$s)))
	(define scope (LinkedHashMap))
	(scope:put s (sjava.compiler.Arg (f:getType) 1 0))
	(define tup (sjava.compiler.Main:extractModifiers (Arrays:asList rest) 1))
	(ci:addMethod (concat "set" (Character:toUpperCase (s:charAt 0)) (s:substring 1 (s:length))) Type:voidType tup:_1 tok:toks scope)
)
;first block after modifiers must be supercall
(define-method-macro (ctor params @rest)
	(define scope (LinkedHashMap))
	(define arg 1)
	(define sets (ArrayList{Token}))
	(for ((i 0)) (< i (params:toks:size)) (inc i)
		(define param (params:toks:get i))
		(instanceCond param
			(VToken
				(scope:put param:val (sjava.compiler.Arg (ci:getType (params:toks:get (+ i 1))) arg 0))
				(inc i)
			)
			(SingleQuoteToken
				(define s (as VToken (param:toks:get 0)):val)
				(define f (ci:c:getField s -1))
				(scope:put s (sjava.compiler.Arg (f:getType) arg 0))
				(sets:add `(set this:,$s ,$s))
			)
		)
		(inc arg)
	)
	(define tup (sjava.compiler.Main:extractModifiers (Arrays:asList rest) 0))
	(define body ((Arrays:asList rest):subList tup:_2 (alen rest)))
	(define toks (ArrayList{LexedParsedToken}))
	(toks:add (body:get 0))
	(toks:addAll sets)
	(toks:addAll (body:subList 1 (body:size)))
	(ci:addMethod "<init>" Type:voidType tup:_1 toks scope)
)
(define-macro (tokString tok)
	(if (instance? tok UnquoteToken)
		(tok:toks:get 0)
		`,(tok:toStringParsed)
	)
)
(define-macro (xml @rest)
	(define out (ArrayList{LexedParsedToken}))
	(forEach tag rest
		(cond
			(
				(&&
					(instance? tag BlockToken)
					(instance? (tag:toks:get 0) VToken)
					((as VToken (tag:toks:get 0)):val:equals "if")
				)
				(out:add
					`(if ,(tag:toks:get 1)
						,(mapA tok (tag:toks:subList 2 (tag:toks:size))
							`(sb:append (xml ,tok))
						)
					)
				)
			)
			((instance? tag BlockToken)
				(define last (tag:toks:get (- (tag:toks:size) 1)))
				(define selfClose
					(&&
						(instance? last VToken)
						((as VToken last):val:equals "!")
					)
				)
				(define size (tag:toks:size))
				(if selfClose (dec size))
				(define props (ArrayList{LexedParsedToken}))
				(define i 1)
				(for () (&& (< i size) (instance? (tag:toks:get i) ArrayToken)) (inc i)
					(define tok (tag:toks:get i))
					(props:add
						(if (= (tok:toks:size) 1)
							`(begin
								(sb:append " ")
								(sb:append (tokString ,(tok:toks:get 0)))
							)
							`(begin
								(sb:append " ")
								(sb:append (tokString ,(tok:toks:get 0)))
								(sb:append "=\"")
								(sb:append (tokString ,(tok:toks:get 1)))
								(sb:append "\"")
							)
						)
					)
				)
				(define children (ArrayList{LexedParsedToken}))
				(forEach tok (tag:toks:subList i size)
					(if (instance? tok BlockToken)
						(children:add `(sb:append (xml ,tok)))
						(children:add `(sb:append (tokString ,tok)))
					)
				)
				(if (&& selfClose (!= (children:size) 0)) (throw (RuntimeException)))
				(out:add
					`(begin
						(sb:append "<")
						(sb:append (tokString ,(tag:toks:get 0)))
						,props
						(sb:append ">")
						,children
						,(if selfClose
							`()
							`(begin
								(sb:append "</")
								(sb:append (tokString ,(tag:toks:get 0)))
								(sb:append ">")
							)
						)
						sb
					)
				)
			)
			(true
				(out:add `(sb:append (tokString ,tag)))
			)
		)
	)
	`(begin
		(define sb (StringBuffer))
		,out
		sb
	)
)
