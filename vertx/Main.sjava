(import java.util.*)

(import io.vertx.core.*)
(import io.vertx.core.buffer.Buffer)
(import io.vertx.core.http.*)
(import io.vertx.ext.web.*)
(import io.vertx.ext.web.handler.*)
(import io.vertx.ext.asyncsql.MySQLClient)
(import io.vertx.ext.sql.*)
(import io.vertx.core.json.*)
(import io.netty.handler.codec.http.QueryStringEncoder)
(import org.mindrot.jbcrypt.BCrypt)
(import io.vertx.ext.web.templ.PebbleTemplateEngine)

(define-class Main (AbstractVerticle) 'public
	(vertx Vertx 'static)
	((main args String[]) void 'public 'static
		(set Main:vertx (Vertx:vertx))
		(Main:vertx:deployVerticle "Main" ((DeploymentOptions):setInstances 5))
		((System:console):readLine)
		(Main:vertx:close)
	)

	(httpClient HttpClient)
	(conn SQLConnection)
	(engine PebbleTemplateEngine)
	((<init>) void 'public
		(super:<init>)
	)
	((start fut Future{Void}) void 'public
		(define onTableCreate
			(lambda Handler{AsyncResult{Void}} (ar)
				(if (ar:succeeded)
					(this:setupRoutes fut)
					(fut:fail (ar:cause))
				)
			)
		)
		(define onConnect
			(lambda Handler{AsyncResult{SQLConnection}} (ar)
				(if (ar:succeeded)
					(begin
						(set this:conn (ar:result))
						(this:conn:execute
							"CREATE TABLE IF NOT EXISTS accounts (id int NOT NULL AUTO_INCREMENT PRIMARY KEY, name varchar(100) UNIQUE, pass varchar(100))"
							onTableCreate
						)
					)
					(fut:fail (ar:cause))
				)
			)
		)
		(define conf (JsonObject))
		(conf:put "host" "localhost")
		(conf:put "database" "app")
		(conf:put "port" 3306)
		(conf:put "username" "root")
		(conf:put "password" "pass")
		(define client (MySQLClient:createShared this:vertx conf))
		(client:getConnection onConnect)
	)
	((stop fut Future{Void}) void 'public
		(this:conn:close (fut:completer))
	)
	((render path String rc RoutingContext) void
		(this:engine:render rc path
			(lambda Handler{AsyncResult{Buffer}} (ar)
				(if (ar:succeeded)
					((rc:response):end (ar:result))
					(rc:fail (ar:cause))
				)
			)
		)
	)
	((setupRoutes fut Future{Void}) void
		(define options (HttpClientOptions))
		(options:setSsl true)
		(set this:httpClient (this:vertx:createHttpClient options))

		(set this:engine (PebbleTemplateEngine:create this:vertx))

		(define router (Router:router this:vertx))

		((router:route):handler (BodyHandler:create))

		((router:route "/login"):handler
			(lambda Handler{RoutingContext} (rc)
				(define req (rc:request))
				(define name (req:getParam "name"))
				(define pass (req:getParam "pass"))
				(define page (Login))
				(if (&& (= (req:method) HttpMethod:POST) (!= name null) (!= pass null))
					(this:conn:queryWithParams
						"SELECT (pass) FROM accounts WHERE name=? LIMIT 1"
						((JsonArray):add name)
						(lambda Handler{AsyncResult{ResultSet}} (ar)
							(define rs (ar:result))
							(define valid
								(&&
									(!= (rs:getNumRows) 0)
									(BCrypt:checkpw pass (((rs:getResults):get 0):getString 0))
								)
							)
							(if valid
								((rc:response):end "Success")
								(begin
									(set page:invalid true)
									(page:render rc)
								)
							)
						)
					)
					(page:render rc)
				)
			)
		)

		((router:route "/register"):handler
			(lambda Handler{RoutingContext} (rc)
				(define req (rc:request))
				(define name (req:getParam "name"))
				(define page (Register))
				(set page:name name)
				(define pass (req:getParam "pass"))
				(define g-recaptcha (req:getParam "g-recaptcha-response"))
				(if
					(||
						(!= (req:method) HttpMethod:POST) (= name null) (= pass null) (= g-recaptcha null)
						(begin
							(set page:invalidName (! (name:matches "[a-zA-Z0-9]{1,100}")))
							page:invalidName
						)
						(begin
							(set page:invalidPass (! (pass:matches "[a-zA-Z0-9]{5,100}")))
							page:invalidPass
						)
					)
					(page:render rc)
					(begin
						(define userRes (rc:response))
						this
						(define onUpdated
							(lambda Handler{AsyncResult{UpdateResult}} (ar)
								(if (ar:succeeded)
									(userRes:end "Success")
									(begin
										(set page:taken true)
										(page:render rc)
									)
								)
							)
						)

						(define onBody
							(lambda Handler{Buffer} (buf)
								(try
									(if ((JsonObject (buf:toString)):getBoolean "success")
										(this:conn:updateWithParams
											"INSERT INTO accounts (name, pass) VALUES (?, ?)"
											(((JsonArray):add
												name):add
												(BCrypt:hashpw pass (BCrypt:gensalt 12))
											)
											onUpdated
										)
										(begin
											(set page:recaptchaError true)
											(page:render rc)
										)
									)
									(e Throwable
										(rc:fail e)
									)
								)
							)
						)
						(define gPost
							(this:httpClient:postAbs "https://www.google.com/recaptcha/api/siteverify"
								(lambda Handler{HttpClientResponse} (gRes)
									(gRes:bodyHandler onBody)
								)
							)
						)
						(define enc (QueryStringEncoder ""))
						(enc:addParam "secret" "6Lek5yYTAAAAAJeKD2b6vmU6Zu7XztzvlN3d7yq3")
						(enc:addParam "response" g-recaptcha)
						(gPost:putHeader "content-type" "application/x-www-form-urlencoded")
						(gPost:end ((enc:toString):substring 1))
					)
				)
			)
		)

		(((this:vertx:createHttpServer):requestHandler
			(lambda Handler{HttpServerRequest} (req)
				(router:accept req)
			)
		):listen 8080)

		(fut:complete)
	)
)

(define-class Base () 'abstract
	((<init>) void
		(super:<init>)
	)
	((page) StringBuffer 'abstract)
	((render rc RoutingContext) void
		((rc:response):putHeader "content-type" "text/html")
		((rc:response):end ((this:page):toString))
	)
	((page body StringBuffer) StringBuffer
		(xml
			"""<html>
				<head>
					<script src="https://www.google.com/recaptcha/api.js"></script>
					<style>
						p {
							display: inline;
						}
						.error {
							background-color:#ff4d4d;
						}
					</style>
				</head>
				<body>
					""" body """
				</body>
			</html>"""
		)
	)
)

(define-class Login (Base)
	(invalid bool)
	((<init>) void
		(super:<init>)
	)
	((page) StringBuffer
		(super:page
			(xml
				(xif this:invalid
					(@ "div" (@ "p" % ("class" "error") "Invalid username or password."))
				)
				"""Login:<br>
				<form action="login" method="post">
					<input name="name" type="text" required placeholder="Name"><br>
					<input name="pass" type="text" required placeholder="Password"><br>
					<input type="submit" value="Submit"><br>
				</form>"""
			)
		)
	)
)

(define-class Register (Base)
	(taken bool)
	(recaptchaError bool)
	(invalidName bool)
	(invalidPass bool)
	(name String)
	((<init>) void
		(super:<init>)
	)
	((page) StringBuffer
		(super:page
			(xml
				(xif this:taken
					(@ "div" (@ "p" % ("class" "error") "Username is already taken."))
				)
				(xif this:recaptchaError
					(@ "div" (@ "p" % ("class" "error") "reCAPTCHA error."))
				)
				(xif this:invalidName
					(@ "div" (@ "p" % ("class" "error") "Invalid username."))
				)
				(xif this:invalidPass
					(@ "div" (@ "p" % ("class" "error") "Invalid password."))
				)
				"Register:<br>"
				(@ "form" % ("action" "register") % ("method" "post")
					(@ "input" % ("name" "name") % ("type" "text") % ("required") % ("placeholder" "Username") % ("maxlength" "100") % ("value" this:name) % ("pattern" "[a-zA-Z0-9]+") % ("oninvalid" "this.setCustomValidity('Minimum 1 character required, alphanumeric')") % ("oninput" "setCustomValidity('')"))
					(@ "br")
					"""<input name="pass" type="text" required placeholder="Password" maxlength="100" pattern="[a-zA-Z0-9]{5,}" oninvalid="this.setCustomValidity('Minimum 5 characters required, alphanumeric')" oninput="setCustomValidity('')">
					<div class="g-recaptcha" data-sitekey="6Lek5yYTAAAAAAgYB34twlRzBIt1iYK4cWQsLcEJ"></div>
					<input type="submit" value="Submit">"""
				)
			)
		)
	)
)
